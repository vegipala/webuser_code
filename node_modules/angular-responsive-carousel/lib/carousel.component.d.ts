import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, SimpleChanges } from '@angular/core';
import { Images } from './interfaces';
import * as ɵngcc0 from '@angular/core';
export declare class CarouselComponent implements OnDestroy {
    private elementRef;
    private ref;
    carousel: any;
    container: any;
    utils: any;
    cells: any;
    slide: any;
    _id: string;
    _images: Images;
    touches: any;
    landscapeMode: any;
    minTimeout: number;
    isVideoPlaying: boolean;
    _isCounter: boolean;
    _width: number;
    _cellWidth: number | '100%';
    _loop: boolean;
    _lightDOM: boolean;
    isMoving: boolean;
    isNgContent: boolean;
    cellLength: number;
    dotsArr: any;
    get isContainerLocked(): any;
    get slideCounter(): any;
    get lapCounter(): any;
    get isLandscape(): boolean;
    get isSafari(): any;
    get counter(): string;
    get cellsElement(): any;
    get isArrows(): boolean;
    get isCounter(): boolean;
    get activeDotIndex(): number;
    get cellLimit(): any;
    events: EventEmitter<any>;
    id: number;
    height: number;
    width: number;
    autoplay: boolean;
    autoplayInterval: number;
    pauseOnHover: boolean;
    dots: boolean;
    borderRadius: number;
    margin: number;
    objectFit: 'contain' | 'cover' | 'none';
    minSwipeDistance: number;
    transitionDuration: number;
    transitionTimingFunction: 'ease' | 'ease-in' | 'ease-out' | 'ease-in-out' | 'linear';
    videoProperties: any;
    counterSeparator: string;
    overflowCellsLimit: number;
    listeners: 'auto' | 'mouse and touch';
    cellsToShow: number;
    cellsToScroll: number;
    freeScroll: boolean;
    arrows: boolean;
    arrowsOutside: boolean;
    arrowsTheme: 'light' | 'dark';
    set images(images: Images & any);
    get images(): Images & any;
    set cellWidth(value: number | '100%');
    set isCounter(value: boolean);
    set loop(value: boolean);
    get loop(): boolean;
    set lightDOM(value: boolean);
    get lightDOM(): boolean;
    hostClassCarousel: boolean;
    hostStyleHeight: string;
    hostStyleWidth: string;
    onWindowResize(event: any): void;
    onMousemove(event: MouseEvent): void;
    onMouseleave(event: MouseEvent): void;
    constructor(elementRef: ElementRef, ref: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    initCarousel(): void;
    detectDomChanges(): void;
    onDomChanges(): void;
    setDimensions(): void;
    getImage(index: any): any;
    handleTouchstart: (event: any) => void;
    handleHorizontalSwipe: (event: any) => void;
    handleTouchend: (event: any) => void;
    handleTap: (event: any) => void;
    handleTransitionendCellContainer(event: any): void;
    toggleVideo(video: any): void;
    getCellWidth(): any;
    next(): void;
    prev(): void;
    isNextArrowDisabled(): any;
    isPrevArrowDisabled(): any;
    getCellLength(): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CarouselComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CarouselComponent, "carousel, [carousel]", never, {
    "height": "height";
    "autoplay": "autoplay";
    "autoplayInterval": "autoplayInterval";
    "pauseOnHover": "pauseOnHover";
    "dots": "dots";
    "margin": "margin";
    "objectFit": "objectFit";
    "minSwipeDistance": "minSwipeDistance";
    "transitionDuration": "transitionDuration";
    "transitionTimingFunction": "transitionTimingFunction";
    "counterSeparator": "counterSeparator";
    "overflowCellsLimit": "overflowCellsLimit";
    "listeners": "listeners";
    "cellsToScroll": "cellsToScroll";
    "freeScroll": "freeScroll";
    "arrows": "arrows";
    "arrowsTheme": "arrowsTheme";
    "isCounter": "counter";
    "images": "images";
    "cellWidth": "cellWidth";
    "loop": "loop";
    "lightDOM": "lightDOM";
    "id": "id";
    "width": "width";
    "borderRadius": "borderRadius";
    "videoProperties": "videoProperties";
    "cellsToShow": "cellsToShow";
    "arrowsOutside": "arrowsOutside";
}, {
    "events": "events";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNhcm91c2VsLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQThGQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBJbWFnZXMgfSBmcm9tICcuL2ludGVyZmFjZXMnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDYXJvdXNlbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XHJcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY7XHJcbiAgICBwcml2YXRlIHJlZjtcclxuICAgIGNhcm91c2VsOiBhbnk7XHJcbiAgICBjb250YWluZXI6IGFueTtcclxuICAgIHV0aWxzOiBhbnk7XHJcbiAgICBjZWxsczogYW55O1xyXG4gICAgc2xpZGU6IGFueTtcclxuICAgIF9pZDogc3RyaW5nO1xyXG4gICAgX2ltYWdlczogSW1hZ2VzO1xyXG4gICAgdG91Y2hlczogYW55O1xyXG4gICAgbGFuZHNjYXBlTW9kZTogYW55O1xyXG4gICAgbWluVGltZW91dDogbnVtYmVyO1xyXG4gICAgaXNWaWRlb1BsYXlpbmc6IGJvb2xlYW47XHJcbiAgICBfaXNDb3VudGVyOiBib29sZWFuO1xyXG4gICAgX3dpZHRoOiBudW1iZXI7XHJcbiAgICBfY2VsbFdpZHRoOiBudW1iZXIgfCAnMTAwJSc7XHJcbiAgICBfbG9vcDogYm9vbGVhbjtcclxuICAgIF9saWdodERPTTogYm9vbGVhbjtcclxuICAgIGlzTW92aW5nOiBib29sZWFuO1xyXG4gICAgaXNOZ0NvbnRlbnQ6IGJvb2xlYW47XHJcbiAgICBjZWxsTGVuZ3RoOiBudW1iZXI7XHJcbiAgICBkb3RzQXJyOiBhbnk7XHJcbiAgICBnZXQgaXNDb250YWluZXJMb2NrZWQoKTogYW55O1xyXG4gICAgZ2V0IHNsaWRlQ291bnRlcigpOiBhbnk7XHJcbiAgICBnZXQgbGFwQ291bnRlcigpOiBhbnk7XHJcbiAgICBnZXQgaXNMYW5kc2NhcGUoKTogYm9vbGVhbjtcclxuICAgIGdldCBpc1NhZmFyaSgpOiBhbnk7XHJcbiAgICBnZXQgY291bnRlcigpOiBzdHJpbmc7XHJcbiAgICBnZXQgY2VsbHNFbGVtZW50KCk6IGFueTtcclxuICAgIGdldCBpc0Fycm93cygpOiBib29sZWFuO1xyXG4gICAgZ2V0IGlzQ291bnRlcigpOiBib29sZWFuO1xyXG4gICAgZ2V0IGFjdGl2ZURvdEluZGV4KCk6IG51bWJlcjtcclxuICAgIGdldCBjZWxsTGltaXQoKTogYW55O1xyXG4gICAgZXZlbnRzOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIGlkOiBudW1iZXI7XHJcbiAgICBoZWlnaHQ6IG51bWJlcjtcclxuICAgIHdpZHRoOiBudW1iZXI7XHJcbiAgICBhdXRvcGxheTogYm9vbGVhbjtcclxuICAgIGF1dG9wbGF5SW50ZXJ2YWw6IG51bWJlcjtcclxuICAgIHBhdXNlT25Ib3ZlcjogYm9vbGVhbjtcclxuICAgIGRvdHM6IGJvb2xlYW47XHJcbiAgICBib3JkZXJSYWRpdXM6IG51bWJlcjtcclxuICAgIG1hcmdpbjogbnVtYmVyO1xyXG4gICAgb2JqZWN0Rml0OiAnY29udGFpbicgfCAnY292ZXInIHwgJ25vbmUnO1xyXG4gICAgbWluU3dpcGVEaXN0YW5jZTogbnVtYmVyO1xyXG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uOiBudW1iZXI7XHJcbiAgICB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb246ICdlYXNlJyB8ICdlYXNlLWluJyB8ICdlYXNlLW91dCcgfCAnZWFzZS1pbi1vdXQnIHwgJ2xpbmVhcic7XHJcbiAgICB2aWRlb1Byb3BlcnRpZXM6IGFueTtcclxuICAgIGNvdW50ZXJTZXBhcmF0b3I6IHN0cmluZztcclxuICAgIG92ZXJmbG93Q2VsbHNMaW1pdDogbnVtYmVyO1xyXG4gICAgbGlzdGVuZXJzOiAnYXV0bycgfCAnbW91c2UgYW5kIHRvdWNoJztcclxuICAgIGNlbGxzVG9TaG93OiBudW1iZXI7XHJcbiAgICBjZWxsc1RvU2Nyb2xsOiBudW1iZXI7XHJcbiAgICBmcmVlU2Nyb2xsOiBib29sZWFuO1xyXG4gICAgYXJyb3dzOiBib29sZWFuO1xyXG4gICAgYXJyb3dzT3V0c2lkZTogYm9vbGVhbjtcclxuICAgIGFycm93c1RoZW1lOiAnbGlnaHQnIHwgJ2RhcmsnO1xyXG4gICAgc2V0IGltYWdlcyhpbWFnZXM6IEltYWdlcyAmIGFueSk7XHJcbiAgICBnZXQgaW1hZ2VzKCk6IEltYWdlcyAmIGFueTtcclxuICAgIHNldCBjZWxsV2lkdGgodmFsdWU6IG51bWJlciB8ICcxMDAlJyk7XHJcbiAgICBzZXQgaXNDb3VudGVyKHZhbHVlOiBib29sZWFuKTtcclxuICAgIHNldCBsb29wKHZhbHVlOiBib29sZWFuKTtcclxuICAgIGdldCBsb29wKCk6IGJvb2xlYW47XHJcbiAgICBzZXQgbGlnaHRET00odmFsdWU6IGJvb2xlYW4pO1xyXG4gICAgZ2V0IGxpZ2h0RE9NKCk6IGJvb2xlYW47XHJcbiAgICBob3N0Q2xhc3NDYXJvdXNlbDogYm9vbGVhbjtcclxuICAgIGhvc3RTdHlsZUhlaWdodDogc3RyaW5nO1xyXG4gICAgaG9zdFN0eWxlV2lkdGg6IHN0cmluZztcclxuICAgIG9uV2luZG93UmVzaXplKGV2ZW50OiBhbnkpOiB2b2lkO1xyXG4gICAgb25Nb3VzZW1vdmUoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkO1xyXG4gICAgb25Nb3VzZWxlYXZlKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZDtcclxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xyXG4gICAgbmdPbkluaXQoKTogdm9pZDtcclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG4gICAgaW5pdENhcm91c2VsKCk6IHZvaWQ7XHJcbiAgICBkZXRlY3REb21DaGFuZ2VzKCk6IHZvaWQ7XHJcbiAgICBvbkRvbUNoYW5nZXMoKTogdm9pZDtcclxuICAgIHNldERpbWVuc2lvbnMoKTogdm9pZDtcclxuICAgIGdldEltYWdlKGluZGV4OiBhbnkpOiBhbnk7XHJcbiAgICBoYW5kbGVUb3VjaHN0YXJ0OiAoZXZlbnQ6IGFueSkgPT4gdm9pZDtcclxuICAgIGhhbmRsZUhvcml6b250YWxTd2lwZTogKGV2ZW50OiBhbnkpID0+IHZvaWQ7XHJcbiAgICBoYW5kbGVUb3VjaGVuZDogKGV2ZW50OiBhbnkpID0+IHZvaWQ7XHJcbiAgICBoYW5kbGVUYXA6IChldmVudDogYW55KSA9PiB2b2lkO1xyXG4gICAgaGFuZGxlVHJhbnNpdGlvbmVuZENlbGxDb250YWluZXIoZXZlbnQ6IGFueSk6IHZvaWQ7XHJcbiAgICB0b2dnbGVWaWRlbyh2aWRlbzogYW55KTogdm9pZDtcclxuICAgIGdldENlbGxXaWR0aCgpOiBhbnk7XHJcbiAgICBuZXh0KCk6IHZvaWQ7XHJcbiAgICBwcmV2KCk6IHZvaWQ7XHJcbiAgICBpc05leHRBcnJvd0Rpc2FibGVkKCk6IGFueTtcclxuICAgIGlzUHJldkFycm93RGlzYWJsZWQoKTogYW55O1xyXG4gICAgZ2V0Q2VsbExlbmd0aCgpOiBhbnk7XHJcbn1cclxuIl19