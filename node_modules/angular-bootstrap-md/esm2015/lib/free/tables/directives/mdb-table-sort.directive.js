import { __decorate, __metadata } from "tslib";
import { AfterViewInit, Directive, ElementRef, EventEmitter, HostListener, Input, OnInit, Output, Renderer2, } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var SortDirection;
(function (SortDirection) {
    SortDirection["ASC"] = "ascending";
    SortDirection["DESC"] = "descending";
    SortDirection["CONST"] = "constant";
})(SortDirection || (SortDirection = {}));
let MdbTableSortDirective = class MdbTableSortDirective {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.data = [];
        this.sortedInto = true;
        this.order = SortDirection.CONST;
        this.dataSource = [];
        this.sortIcon = false;
        this.resetSortDirection = false;
        this.sortEnd = new EventEmitter();
        this.sorted = new EventEmitter();
    }
    onclick() {
        this.sortDataBy(this.trimWhiteSigns(this.sortBy.toString()));
        this.sortEnd.emit(this.dataSource);
        this.sorted.emit({
            data: this.dataSource,
            sortOrder: this.order,
            sortBy: this.sortBy,
        });
        this.removeSort();
    }
    trimWhiteSigns(headElement) {
        return headElement.replace(/ /g, '');
    }
    moveArrayItem(arr, oldIndex, newIndex) {
        while (oldIndex < 0) {
            oldIndex += arr.length;
        }
        while (newIndex < 0) {
            newIndex += arr.length;
        }
        if (newIndex >= arr.length) {
            let k = newIndex - arr.length;
            while (k-- + 1) {
                arr.push(null);
            }
        }
        arr.splice(newIndex, 0, arr.splice(oldIndex, 1)[0]);
        return arr;
    }
    sortDataBy(key) {
        let ariaPass = true;
        const setAria = (sort, id) => {
            if (ariaPass) {
                let nextSortType = '';
                if (this.resetSortDirection) {
                    if (sort === SortDirection.CONST) {
                        nextSortType = SortDirection.DESC;
                    }
                    else if (sort === SortDirection.DESC) {
                        nextSortType = SortDirection.ASC;
                    }
                    else if (sort === SortDirection.ASC) {
                        nextSortType = SortDirection.CONST;
                    }
                }
                else {
                    if (sort === SortDirection.DESC) {
                        nextSortType = SortDirection.ASC;
                    }
                    else if (sort === SortDirection.ASC) {
                        nextSortType = SortDirection.DESC;
                    }
                }
                this.renderer.setAttribute(this.el.nativeElement, 'aria-sort', sort);
                this.renderer.setAttribute(this.el.nativeElement, 'aria-label', `${id}: activate to sort column ${nextSortType}`);
                ariaPass = false;
            }
        };
        key = key.split('.');
        if (this.resetSortDirection) {
            const sortFn = (a, b) => {
                a = a[key];
                b = b[key];
                return a > b ? -1 : 1;
            };
            if (this.order === SortDirection.CONST) {
                setAria(SortDirection.DESC, key);
                this.order = SortDirection.DESC;
                this.dataSource.sort(sortFn);
            }
            else if (this.order === SortDirection.DESC) {
                setAria(SortDirection.ASC, key);
                this.order = SortDirection.ASC;
                this.dataSource.sort(sortFn).reverse();
            }
            else if (this.order === SortDirection.ASC) {
                setAria(SortDirection.CONST, key);
                this.order = SortDirection.CONST;
                this.data.map((el, index) => {
                    this.dataSource[index] = el;
                });
            }
        }
        else {
            this.dataSource.sort((a, b) => {
                let i = 0;
                while (i < key.length) {
                    a = a[key[i]];
                    b = b[key[i]];
                    i++;
                }
                if (a < b) {
                    setAria(SortDirection.ASC, key);
                    this.order = SortDirection.ASC;
                    return this.sortedInto ? 1 : -1;
                }
                else if (a > b) {
                    setAria(SortDirection.DESC, key);
                    this.order = SortDirection.DESC;
                    return this.sortedInto ? -1 : 1;
                }
                else if (a == null || b == null) {
                    this.order = SortDirection.CONST;
                    return 1;
                }
                else {
                    this.order = SortDirection.CONST;
                    return 0;
                }
            });
            this.sortedInto = !this.sortedInto;
        }
    }
    ngOnInit() {
        const key = this.trimWhiteSigns(this.sortBy.toString()).split('.');
        this.renderer.setAttribute(this.el.nativeElement, 'aria-label', `${key}: activate to sort column descending`);
        if (this.data.length === 0) {
            // this.dataSource.map((element: any) => {
            //   this.data.push(element);
            // })
            this.data = Array.from(this.dataSource);
        }
    }
    ngAfterViewInit() {
        if (this.sortIcon) {
            this.createIcon();
        }
    }
    createIcon() {
        // tslint:disable-next-line:max-line-length
        const iconUp = `<svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="arrow-up" class="svg-inline--fa fa-arrow-up fa-w-14 ascending" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M34.9 289.5l-22.2-22.2c-9.4-9.4-9.4-24.6 0-33.9L207 39c9.4-9.4 24.6-9.4 33.9 0l194.3 194.3c9.4 9.4 9.4 24.6 0 33.9L413 289.4c-9.5 9.5-25 9.3-34.3-.4L264 168.6V456c0 13.3-10.7 24-24 24h-32c-13.3 0-24-10.7-24-24V168.6L69.2 289.1c-9.3 9.8-24.8 10-34.3.4z"></path></svg>`;
        // tslint:disable-next-line:max-line-length
        const iconDown = `<svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="arrow-down" class="svg-inline--fa fa-arrow-down fa-w-14 descending" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M413.1 222.5l22.2 22.2c9.4 9.4 9.4 24.6 0 33.9L241 473c-9.4 9.4-24.6 9.4-33.9 0L12.7 278.6c-9.4-9.4-9.4-24.6 0-33.9l22.2-22.2c9.5-9.5 25-9.3 34.3.4L184 343.4V56c0-13.3 10.7-24 24-24h32c13.3 0 24 10.7 24 24v287.4l114.8-120.5c9.3-9.8 24.8-10 34.3-.4z"></path></svg>`;
        const title = this.el.nativeElement.innerHTML;
        this.el.nativeElement.innerHTML = `${title} ${iconUp} ${iconDown}`;
    }
    removeSort() {
        const nodes = this.el.nativeElement.parentElement.childNodes;
        if (nodes) {
            Array.from(nodes).map((node) => {
                if (node !== this.el.nativeElement && node.nodeName !== '#comment') {
                    this.renderer.removeAttribute(node, 'aria-sort');
                }
            });
        }
    }
};
MdbTableSortDirective.ɵfac = function MdbTableSortDirective_Factory(t) { return new (t || MdbTableSortDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
MdbTableSortDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MdbTableSortDirective, selectors: [["", "mdbTableSort", ""]], hostBindings: function MdbTableSortDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function MdbTableSortDirective_click_HostBindingHandler() { return ctx.onclick(); });
    } }, inputs: { dataSource: ["mdbTableSort", "dataSource"], sortIcon: "sortIcon", resetSortDirection: "resetSortDirection", sortBy: "sortBy" }, outputs: { sortEnd: "sortEnd", sorted: "sorted" } });
MdbTableSortDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
__decorate([
    Input('mdbTableSort'),
    __metadata("design:type", Array)
], MdbTableSortDirective.prototype, "dataSource", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MdbTableSortDirective.prototype, "sortBy", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], MdbTableSortDirective.prototype, "sortIcon", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], MdbTableSortDirective.prototype, "resetSortDirection", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], MdbTableSortDirective.prototype, "sortEnd", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], MdbTableSortDirective.prototype, "sorted", void 0);
__decorate([
    HostListener('click'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MdbTableSortDirective.prototype, "onclick", null);
MdbTableSortDirective = __decorate([ __metadata("design:paramtypes", [ElementRef, Renderer2])
], MdbTableSortDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MdbTableSortDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbTableSort]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { dataSource: [{
            type: Input,
            args: ['mdbTableSort']
        }], sortIcon: [{
            type: Input
        }], resetSortDirection: [{
            type: Input
        }], sortEnd: [{
            type: Output
        }], sorted: [{
            type: Output
        }], onclick: [{
            type: HostListener,
            args: ['click']
        }], sortBy: [{
            type: Input
        }] }); })();
export { MdbTableSortDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,