import { __decorate, __metadata } from "tslib";
import { AfterViewInit, Directive, ElementRef, EventEmitter, HostListener, Input, OnInit, Output, Renderer2, } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var SortDirection;
(function (SortDirection) {
    SortDirection["ASC"] = "ascending";
    SortDirection["DESC"] = "descending";
    SortDirection["CONST"] = "constant";
})(SortDirection || (SortDirection = {}));
var MdbTableSortDirective = /** @class */ (function () {
    function MdbTableSortDirective(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.data = [];
        this.sortedInto = true;
        this.order = SortDirection.CONST;
        this.dataSource = [];
        this.sortIcon = false;
        this.resetSortDirection = false;
        this.sortEnd = new EventEmitter();
        this.sorted = new EventEmitter();
    }
    MdbTableSortDirective.prototype.onclick = function () {
        this.sortDataBy(this.trimWhiteSigns(this.sortBy.toString()));
        this.sortEnd.emit(this.dataSource);
        this.sorted.emit({
            data: this.dataSource,
            sortOrder: this.order,
            sortBy: this.sortBy,
        });
        this.removeSort();
    };
    MdbTableSortDirective.prototype.trimWhiteSigns = function (headElement) {
        return headElement.replace(/ /g, '');
    };
    MdbTableSortDirective.prototype.moveArrayItem = function (arr, oldIndex, newIndex) {
        while (oldIndex < 0) {
            oldIndex += arr.length;
        }
        while (newIndex < 0) {
            newIndex += arr.length;
        }
        if (newIndex >= arr.length) {
            var k = newIndex - arr.length;
            while (k-- + 1) {
                arr.push(null);
            }
        }
        arr.splice(newIndex, 0, arr.splice(oldIndex, 1)[0]);
        return arr;
    };
    MdbTableSortDirective.prototype.sortDataBy = function (key) {
        var _this = this;
        var ariaPass = true;
        var setAria = function (sort, id) {
            if (ariaPass) {
                var nextSortType = '';
                if (_this.resetSortDirection) {
                    if (sort === SortDirection.CONST) {
                        nextSortType = SortDirection.DESC;
                    }
                    else if (sort === SortDirection.DESC) {
                        nextSortType = SortDirection.ASC;
                    }
                    else if (sort === SortDirection.ASC) {
                        nextSortType = SortDirection.CONST;
                    }
                }
                else {
                    if (sort === SortDirection.DESC) {
                        nextSortType = SortDirection.ASC;
                    }
                    else if (sort === SortDirection.ASC) {
                        nextSortType = SortDirection.DESC;
                    }
                }
                _this.renderer.setAttribute(_this.el.nativeElement, 'aria-sort', sort);
                _this.renderer.setAttribute(_this.el.nativeElement, 'aria-label', id + ": activate to sort column " + nextSortType);
                ariaPass = false;
            }
        };
        key = key.split('.');
        if (this.resetSortDirection) {
            var sortFn = function (a, b) {
                a = a[key];
                b = b[key];
                return a > b ? -1 : 1;
            };
            if (this.order === SortDirection.CONST) {
                setAria(SortDirection.DESC, key);
                this.order = SortDirection.DESC;
                this.dataSource.sort(sortFn);
            }
            else if (this.order === SortDirection.DESC) {
                setAria(SortDirection.ASC, key);
                this.order = SortDirection.ASC;
                this.dataSource.sort(sortFn).reverse();
            }
            else if (this.order === SortDirection.ASC) {
                setAria(SortDirection.CONST, key);
                this.order = SortDirection.CONST;
                this.data.map(function (el, index) {
                    _this.dataSource[index] = el;
                });
            }
        }
        else {
            this.dataSource.sort(function (a, b) {
                var i = 0;
                while (i < key.length) {
                    a = a[key[i]];
                    b = b[key[i]];
                    i++;
                }
                if (a < b) {
                    setAria(SortDirection.ASC, key);
                    _this.order = SortDirection.ASC;
                    return _this.sortedInto ? 1 : -1;
                }
                else if (a > b) {
                    setAria(SortDirection.DESC, key);
                    _this.order = SortDirection.DESC;
                    return _this.sortedInto ? -1 : 1;
                }
                else if (a == null || b == null) {
                    _this.order = SortDirection.CONST;
                    return 1;
                }
                else {
                    _this.order = SortDirection.CONST;
                    return 0;
                }
            });
            this.sortedInto = !this.sortedInto;
        }
    };
    MdbTableSortDirective.prototype.ngOnInit = function () {
        var key = this.trimWhiteSigns(this.sortBy.toString()).split('.');
        this.renderer.setAttribute(this.el.nativeElement, 'aria-label', key + ": activate to sort column descending");
        if (this.data.length === 0) {
            // this.dataSource.map((element: any) => {
            //   this.data.push(element);
            // })
            this.data = Array.from(this.dataSource);
        }
    };
    MdbTableSortDirective.prototype.ngAfterViewInit = function () {
        if (this.sortIcon) {
            this.createIcon();
        }
    };
    MdbTableSortDirective.prototype.createIcon = function () {
        // tslint:disable-next-line:max-line-length
        var iconUp = "<svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"arrow-up\" class=\"svg-inline--fa fa-arrow-up fa-w-14 ascending\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"currentColor\" d=\"M34.9 289.5l-22.2-22.2c-9.4-9.4-9.4-24.6 0-33.9L207 39c9.4-9.4 24.6-9.4 33.9 0l194.3 194.3c9.4 9.4 9.4 24.6 0 33.9L413 289.4c-9.5 9.5-25 9.3-34.3-.4L264 168.6V456c0 13.3-10.7 24-24 24h-32c-13.3 0-24-10.7-24-24V168.6L69.2 289.1c-9.3 9.8-24.8 10-34.3.4z\"></path></svg>";
        // tslint:disable-next-line:max-line-length
        var iconDown = "<svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"arrow-down\" class=\"svg-inline--fa fa-arrow-down fa-w-14 descending\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"currentColor\" d=\"M413.1 222.5l22.2 22.2c9.4 9.4 9.4 24.6 0 33.9L241 473c-9.4 9.4-24.6 9.4-33.9 0L12.7 278.6c-9.4-9.4-9.4-24.6 0-33.9l22.2-22.2c9.5-9.5 25-9.3 34.3.4L184 343.4V56c0-13.3 10.7-24 24-24h32c13.3 0 24 10.7 24 24v287.4l114.8-120.5c9.3-9.8 24.8-10 34.3-.4z\"></path></svg>";
        var title = this.el.nativeElement.innerHTML;
        this.el.nativeElement.innerHTML = title + " " + iconUp + " " + iconDown;
    };
    MdbTableSortDirective.prototype.removeSort = function () {
        var _this = this;
        var nodes = this.el.nativeElement.parentElement.childNodes;
        if (nodes) {
            Array.from(nodes).map(function (node) {
                if (node !== _this.el.nativeElement && node.nodeName !== '#comment') {
                    _this.renderer.removeAttribute(node, 'aria-sort');
                }
            });
        }
    };
    MdbTableSortDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input('mdbTableSort'),
        __metadata("design:type", Array)
    ], MdbTableSortDirective.prototype, "dataSource", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], MdbTableSortDirective.prototype, "sortBy", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MdbTableSortDirective.prototype, "sortIcon", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], MdbTableSortDirective.prototype, "resetSortDirection", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], MdbTableSortDirective.prototype, "sortEnd", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], MdbTableSortDirective.prototype, "sorted", void 0);
    __decorate([
        HostListener('click'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], MdbTableSortDirective.prototype, "onclick", null);
    MdbTableSortDirective = __decorate([ __metadata("design:paramtypes", [ElementRef, Renderer2])
    ], MdbTableSortDirective);
MdbTableSortDirective.ɵfac = function MdbTableSortDirective_Factory(t) { return new (t || MdbTableSortDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
MdbTableSortDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MdbTableSortDirective, selectors: [["", "mdbTableSort", ""]], hostBindings: function MdbTableSortDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function MdbTableSortDirective_click_HostBindingHandler() { return ctx.onclick(); });
    } }, inputs: { dataSource: ["mdbTableSort", "dataSource"], sortIcon: "sortIcon", resetSortDirection: "resetSortDirection", sortBy: "sortBy" }, outputs: { sortEnd: "sortEnd", sorted: "sorted" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MdbTableSortDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbTableSort]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { dataSource: [{
            type: Input,
            args: ['mdbTableSort']
        }], sortIcon: [{
            type: Input
        }], resetSortDirection: [{
            type: Input
        }], sortEnd: [{
            type: Output
        }], sorted: [{
            type: Output
        }], onclick: [{
            type: HostListener,
            args: ['click']
        }], sortBy: [{
            type: Input
        }] }); })();
    return MdbTableSortDirective;
}());
export { MdbTableSortDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,