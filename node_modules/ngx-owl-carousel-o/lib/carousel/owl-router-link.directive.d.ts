import { LocationStrategy } from '@angular/common';
import { ElementRef, OnChanges, OnDestroy, Renderer2 } from '@angular/core';
import { Router, ActivatedRoute, UrlTree } from '@angular/router';
import * as ɵngcc0 from '@angular/core';
export declare type QueryParamsHandling = 'merge' | 'preserve' | '';
export declare class OwlRouterLinkDirective {
    private router;
    private route;
    queryParams: {
        [k: string]: any;
    };
    fragment: string;
    queryParamsHandling: QueryParamsHandling;
    preserveFragment: boolean;
    skipLocationChange: boolean;
    replaceUrl: boolean;
    stopLink: boolean;
    private commands;
    private preserve;
    constructor(router: Router, route: ActivatedRoute, tabIndex: string, renderer: Renderer2, el: ElementRef);
    set owlRouterLink(commands: any[] | string);
    /**
     * @deprecated 4.0.0 use `queryParamsHandling` instead.
     */
    set preserveQueryParams(value: boolean);
    onClick(): boolean;
    get urlTree(): UrlTree;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OwlRouterLinkDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<OwlRouterLinkDirective, ":not(a)[owlRouterLink]", never, {
    "stopLink": "stopLink";
    "owlRouterLink": "owlRouterLink";
    "preserveQueryParams": "preserveQueryParams";
    "queryParams": "queryParams";
    "fragment": "fragment";
    "queryParamsHandling": "queryParamsHandling";
    "preserveFragment": "preserveFragment";
    "skipLocationChange": "skipLocationChange";
    "replaceUrl": "replaceUrl";
}, {}, never>;
}
/**
 * @description
 *
 * Lets you link to specific routes in your app.
 *
 * See `RouterLink` for more information.
 *
 * @ngModule RouterModule
 *
 * @publicApi
 */
export declare class OwlRouterLinkWithHrefDirective implements OnChanges, OnDestroy {
    private router;
    private route;
    private locationStrategy;
    target: string;
    queryParams: {
        [k: string]: any;
    };
    fragment: string;
    queryParamsHandling: QueryParamsHandling;
    preserveFragment: boolean;
    skipLocationChange: boolean;
    replaceUrl: boolean;
    stopLink: boolean;
    private commands;
    private subscription;
    private preserve;
    href: string;
    constructor(router: Router, route: ActivatedRoute, locationStrategy: LocationStrategy);
    set owlRouterLink(commands: any[] | string);
    set preserveQueryParams(value: boolean);
    ngOnChanges(changes: {}): any;
    ngOnDestroy(): any;
    onClick(button: number, ctrlKey: boolean, metaKey: boolean, shiftKey: boolean): boolean;
    private updateTargetUrlAndHref;
    get urlTree(): UrlTree;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OwlRouterLinkWithHrefDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<OwlRouterLinkWithHrefDirective, "a[owlRouterLink]", never, {
    "stopLink": "stopLink";
    "owlRouterLink": "owlRouterLink";
    "preserveQueryParams": "preserveQueryParams";
    "target": "target";
    "queryParams": "queryParams";
    "fragment": "fragment";
    "queryParamsHandling": "queryParamsHandling";
    "preserveFragment": "preserveFragment";
    "skipLocationChange": "skipLocationChange";
    "replaceUrl": "replaceUrl";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3dsLXJvdXRlci1saW5rLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJvd2wtcm91dGVyLWxpbmsuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExvY2F0aW9uU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBFbGVtZW50UmVmLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJvdXRlciwgQWN0aXZhdGVkUm91dGUsIFVybFRyZWUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5leHBvcnQgZGVjbGFyZSB0eXBlIFF1ZXJ5UGFyYW1zSGFuZGxpbmcgPSAnbWVyZ2UnIHwgJ3ByZXNlcnZlJyB8ICcnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBPd2xSb3V0ZXJMaW5rRGlyZWN0aXZlIHtcclxuICAgIHByaXZhdGUgcm91dGVyO1xyXG4gICAgcHJpdmF0ZSByb3V0ZTtcclxuICAgIHF1ZXJ5UGFyYW1zOiB7XHJcbiAgICAgICAgW2s6IHN0cmluZ106IGFueTtcclxuICAgIH07XHJcbiAgICBmcmFnbWVudDogc3RyaW5nO1xyXG4gICAgcXVlcnlQYXJhbXNIYW5kbGluZzogUXVlcnlQYXJhbXNIYW5kbGluZztcclxuICAgIHByZXNlcnZlRnJhZ21lbnQ6IGJvb2xlYW47XHJcbiAgICBza2lwTG9jYXRpb25DaGFuZ2U6IGJvb2xlYW47XHJcbiAgICByZXBsYWNlVXJsOiBib29sZWFuO1xyXG4gICAgc3RvcExpbms6IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIGNvbW1hbmRzO1xyXG4gICAgcHJpdmF0ZSBwcmVzZXJ2ZTtcclxuICAgIGNvbnN0cnVjdG9yKHJvdXRlcjogUm91dGVyLCByb3V0ZTogQWN0aXZhdGVkUm91dGUsIHRhYkluZGV4OiBzdHJpbmcsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIGVsOiBFbGVtZW50UmVmKTtcclxuICAgIHNldCBvd2xSb3V0ZXJMaW5rKGNvbW1hbmRzOiBhbnlbXSB8IHN0cmluZyk7XHJcbiAgICAvKipcclxuICAgICAqIEBkZXByZWNhdGVkIDQuMC4wIHVzZSBgcXVlcnlQYXJhbXNIYW5kbGluZ2AgaW5zdGVhZC5cclxuICAgICAqL1xyXG4gICAgc2V0IHByZXNlcnZlUXVlcnlQYXJhbXModmFsdWU6IGJvb2xlYW4pO1xyXG4gICAgb25DbGljaygpOiBib29sZWFuO1xyXG4gICAgZ2V0IHVybFRyZWUoKTogVXJsVHJlZTtcclxufVxyXG4vKipcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIExldHMgeW91IGxpbmsgdG8gc3BlY2lmaWMgcm91dGVzIGluIHlvdXIgYXBwLlxyXG4gKlxyXG4gKiBTZWUgYFJvdXRlckxpbmtgIGZvciBtb3JlIGluZm9ybWF0aW9uLlxyXG4gKlxyXG4gKiBAbmdNb2R1bGUgUm91dGVyTW9kdWxlXHJcbiAqXHJcbiAqIEBwdWJsaWNBcGlcclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE93bFJvdXRlckxpbmtXaXRoSHJlZkRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcclxuICAgIHByaXZhdGUgcm91dGVyO1xyXG4gICAgcHJpdmF0ZSByb3V0ZTtcclxuICAgIHByaXZhdGUgbG9jYXRpb25TdHJhdGVneTtcclxuICAgIHRhcmdldDogc3RyaW5nO1xyXG4gICAgcXVlcnlQYXJhbXM6IHtcclxuICAgICAgICBbazogc3RyaW5nXTogYW55O1xyXG4gICAgfTtcclxuICAgIGZyYWdtZW50OiBzdHJpbmc7XHJcbiAgICBxdWVyeVBhcmFtc0hhbmRsaW5nOiBRdWVyeVBhcmFtc0hhbmRsaW5nO1xyXG4gICAgcHJlc2VydmVGcmFnbWVudDogYm9vbGVhbjtcclxuICAgIHNraXBMb2NhdGlvbkNoYW5nZTogYm9vbGVhbjtcclxuICAgIHJlcGxhY2VVcmw6IGJvb2xlYW47XHJcbiAgICBzdG9wTGluazogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgY29tbWFuZHM7XHJcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbjtcclxuICAgIHByaXZhdGUgcHJlc2VydmU7XHJcbiAgICBocmVmOiBzdHJpbmc7XHJcbiAgICBjb25zdHJ1Y3Rvcihyb3V0ZXI6IFJvdXRlciwgcm91dGU6IEFjdGl2YXRlZFJvdXRlLCBsb2NhdGlvblN0cmF0ZWd5OiBMb2NhdGlvblN0cmF0ZWd5KTtcclxuICAgIHNldCBvd2xSb3V0ZXJMaW5rKGNvbW1hbmRzOiBhbnlbXSB8IHN0cmluZyk7XHJcbiAgICBzZXQgcHJlc2VydmVRdWVyeVBhcmFtcyh2YWx1ZTogYm9vbGVhbik7XHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiB7fSk6IGFueTtcclxuICAgIG5nT25EZXN0cm95KCk6IGFueTtcclxuICAgIG9uQ2xpY2soYnV0dG9uOiBudW1iZXIsIGN0cmxLZXk6IGJvb2xlYW4sIG1ldGFLZXk6IGJvb2xlYW4sIHNoaWZ0S2V5OiBib29sZWFuKTogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgdXBkYXRlVGFyZ2V0VXJsQW5kSHJlZjtcclxuICAgIGdldCB1cmxUcmVlKCk6IFVybFRyZWU7XHJcbn1cclxuIl19