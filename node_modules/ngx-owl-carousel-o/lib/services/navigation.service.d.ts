import { OnDestroy } from '@angular/core';
import { NavData, DotsData } from '../models/navigation-data.models';
import { CarouselService } from './carousel.service';
import { Subscription } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class NavigationService implements OnDestroy {
    private carouselService;
    /**
     * Subscrioption to merge Observable  from CarouselService
     */
    navSubscription: Subscription;
    /**
     * Indicates whether the plugin is initialized or not.
     */
    protected _initialized: boolean;
    /**
     * The current paging indexes.
     */
    protected _pages: any[];
    /**
     * Data for navigation elements of the user interface.
     */
    protected _navData: NavData;
    /**
     * Data for dot elements of the user interface.
     */
    protected _dotsData: DotsData;
    constructor(carouselService: CarouselService);
    ngOnDestroy(): void;
    /**
     * Defines Observables which service must observe
     */
    spyDataStreams(): void;
    /**
       * Initializes the layout of the plugin and extends the carousel.
       */
    initialize(): void;
    /**
     * Calculates internal states and updates prop _pages
     */
    private _updateNavPages;
    /**
       * Draws the user interface.
       * @todo The option `dotsData` wont work.
       */
    draw(): void;
    /**
     * Updates navigation buttons's and dots's states
     */
    update(): void;
    /**
     * Changes state of nav buttons (disabled, enabled)
     */
    private _updateNavButtons;
    /**
     * Changes active dot if page becomes changed
     */
    private _updateDots;
    /**
       * Gets the current page position of the carousel.
       * @returns the current page position of the carousel
       */
    private _current;
    /**
       * Gets the current succesor/predecessor position.
     * @param sussessor position of slide
       * @returns the current succesor/predecessor position
       */
    private _getPosition;
    /**
       * Slides to the next item or page.
       * @param speed The time in milliseconds for the transition.
       */
    next(speed: number | boolean): void;
    /**
     * Slides to the previous item or page.
     * @param speed The time in milliseconds for the transition.
     */
    prev(speed: number | boolean): void;
    /**
     * Slides to the specified item or page.
     * @param position - The position of the item or page.
     * @param speed - The time in milliseconds for the transition.
     * @param standard - Whether to use the standard behaviour or not. Default meaning false
     */
    to(position: number, speed: number | boolean, standard?: boolean): void;
    /**
     * Moves carousel after user's clicking on any dots
     */
    moveByDot(dotId: string): void;
    /**
     * rewinds carousel to slide with needed id
     * @param id id of slide
     */
    toSlideById(id: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NavigationService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NavigationService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWdhdGlvbi5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbIm5hdmlnYXRpb24uc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBGQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOYXZEYXRhLCBEb3RzRGF0YSB9IGZyb20gJy4uL21vZGVscy9uYXZpZ2F0aW9uLWRhdGEubW9kZWxzJztcclxuaW1wb3J0IHsgQ2Fyb3VzZWxTZXJ2aWNlIH0gZnJvbSAnLi9jYXJvdXNlbC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5hdmlnYXRpb25TZXJ2aWNlIGltcGxlbWVudHMgT25EZXN0cm95IHtcclxuICAgIHByaXZhdGUgY2Fyb3VzZWxTZXJ2aWNlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdWJzY3Jpb3B0aW9uIHRvIG1lcmdlIE9ic2VydmFibGUgIGZyb20gQ2Fyb3VzZWxTZXJ2aWNlXHJcbiAgICAgKi9cclxuICAgIG5hdlN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgcGx1Z2luIGlzIGluaXRpYWxpemVkIG9yIG5vdC5cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIF9pbml0aWFsaXplZDogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGN1cnJlbnQgcGFnaW5nIGluZGV4ZXMuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBfcGFnZXM6IGFueVtdO1xyXG4gICAgLyoqXHJcbiAgICAgKiBEYXRhIGZvciBuYXZpZ2F0aW9uIGVsZW1lbnRzIG9mIHRoZSB1c2VyIGludGVyZmFjZS5cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIF9uYXZEYXRhOiBOYXZEYXRhO1xyXG4gICAgLyoqXHJcbiAgICAgKiBEYXRhIGZvciBkb3QgZWxlbWVudHMgb2YgdGhlIHVzZXIgaW50ZXJmYWNlLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgX2RvdHNEYXRhOiBEb3RzRGF0YTtcclxuICAgIGNvbnN0cnVjdG9yKGNhcm91c2VsU2VydmljZTogQ2Fyb3VzZWxTZXJ2aWNlKTtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIERlZmluZXMgT2JzZXJ2YWJsZXMgd2hpY2ggc2VydmljZSBtdXN0IG9ic2VydmVcclxuICAgICAqL1xyXG4gICAgc3B5RGF0YVN0cmVhbXMoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICAgKiBJbml0aWFsaXplcyB0aGUgbGF5b3V0IG9mIHRoZSBwbHVnaW4gYW5kIGV4dGVuZHMgdGhlIGNhcm91c2VsLlxyXG4gICAgICAgKi9cclxuICAgIGluaXRpYWxpemUoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlcyBpbnRlcm5hbCBzdGF0ZXMgYW5kIHVwZGF0ZXMgcHJvcCBfcGFnZXNcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfdXBkYXRlTmF2UGFnZXM7XHJcbiAgICAvKipcclxuICAgICAgICogRHJhd3MgdGhlIHVzZXIgaW50ZXJmYWNlLlxyXG4gICAgICAgKiBAdG9kbyBUaGUgb3B0aW9uIGBkb3RzRGF0YWAgd29udCB3b3JrLlxyXG4gICAgICAgKi9cclxuICAgIGRyYXcoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlcyBuYXZpZ2F0aW9uIGJ1dHRvbnMncyBhbmQgZG90cydzIHN0YXRlc1xyXG4gICAgICovXHJcbiAgICB1cGRhdGUoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogQ2hhbmdlcyBzdGF0ZSBvZiBuYXYgYnV0dG9ucyAoZGlzYWJsZWQsIGVuYWJsZWQpXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX3VwZGF0ZU5hdkJ1dHRvbnM7XHJcbiAgICAvKipcclxuICAgICAqIENoYW5nZXMgYWN0aXZlIGRvdCBpZiBwYWdlIGJlY29tZXMgY2hhbmdlZFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF91cGRhdGVEb3RzO1xyXG4gICAgLyoqXHJcbiAgICAgICAqIEdldHMgdGhlIGN1cnJlbnQgcGFnZSBwb3NpdGlvbiBvZiB0aGUgY2Fyb3VzZWwuXHJcbiAgICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHBhZ2UgcG9zaXRpb24gb2YgdGhlIGNhcm91c2VsXHJcbiAgICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfY3VycmVudDtcclxuICAgIC8qKlxyXG4gICAgICAgKiBHZXRzIHRoZSBjdXJyZW50IHN1Y2Nlc29yL3ByZWRlY2Vzc29yIHBvc2l0aW9uLlxyXG4gICAgICogQHBhcmFtIHN1c3Nlc3NvciBwb3NpdGlvbiBvZiBzbGlkZVxyXG4gICAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBzdWNjZXNvci9wcmVkZWNlc3NvciBwb3NpdGlvblxyXG4gICAgICAgKi9cclxuICAgIHByaXZhdGUgX2dldFBvc2l0aW9uO1xyXG4gICAgLyoqXHJcbiAgICAgICAqIFNsaWRlcyB0byB0aGUgbmV4dCBpdGVtIG9yIHBhZ2UuXHJcbiAgICAgICAqIEBwYXJhbSBzcGVlZCBUaGUgdGltZSBpbiBtaWxsaXNlY29uZHMgZm9yIHRoZSB0cmFuc2l0aW9uLlxyXG4gICAgICAgKi9cclxuICAgIG5leHQoc3BlZWQ6IG51bWJlciB8IGJvb2xlYW4pOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTbGlkZXMgdG8gdGhlIHByZXZpb3VzIGl0ZW0gb3IgcGFnZS5cclxuICAgICAqIEBwYXJhbSBzcGVlZCBUaGUgdGltZSBpbiBtaWxsaXNlY29uZHMgZm9yIHRoZSB0cmFuc2l0aW9uLlxyXG4gICAgICovXHJcbiAgICBwcmV2KHNwZWVkOiBudW1iZXIgfCBib29sZWFuKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogU2xpZGVzIHRvIHRoZSBzcGVjaWZpZWQgaXRlbSBvciBwYWdlLlxyXG4gICAgICogQHBhcmFtIHBvc2l0aW9uIC0gVGhlIHBvc2l0aW9uIG9mIHRoZSBpdGVtIG9yIHBhZ2UuXHJcbiAgICAgKiBAcGFyYW0gc3BlZWQgLSBUaGUgdGltZSBpbiBtaWxsaXNlY29uZHMgZm9yIHRoZSB0cmFuc2l0aW9uLlxyXG4gICAgICogQHBhcmFtIHN0YW5kYXJkIC0gV2hldGhlciB0byB1c2UgdGhlIHN0YW5kYXJkIGJlaGF2aW91ciBvciBub3QuIERlZmF1bHQgbWVhbmluZyBmYWxzZVxyXG4gICAgICovXHJcbiAgICB0byhwb3NpdGlvbjogbnVtYmVyLCBzcGVlZDogbnVtYmVyIHwgYm9vbGVhbiwgc3RhbmRhcmQ/OiBib29sZWFuKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogTW92ZXMgY2Fyb3VzZWwgYWZ0ZXIgdXNlcidzIGNsaWNraW5nIG9uIGFueSBkb3RzXHJcbiAgICAgKi9cclxuICAgIG1vdmVCeURvdChkb3RJZDogc3RyaW5nKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogcmV3aW5kcyBjYXJvdXNlbCB0byBzbGlkZSB3aXRoIG5lZWRlZCBpZFxyXG4gICAgICogQHBhcmFtIGlkIGlkIG9mIHNsaWRlXHJcbiAgICAgKi9cclxuICAgIHRvU2xpZGVCeUlkKGlkOiBzdHJpbmcpOiB2b2lkO1xyXG59XHJcbiJdfQ==