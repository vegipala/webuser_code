import { ClassProvider, FactoryProvider, InjectionToken } from '@angular/core';
/**
 * Create a new injection token for injecting the Document into a component.
 */
import * as ɵngcc0 from '@angular/core';
export declare const DOCUMENT: InjectionToken<Document>;
/**
 * Define abstract class for obtaining reference to the global Document object.
 */
export declare abstract class DocumentRef {
    get nativeDocument(): Document | Object;
}
/**
 * Define class that implements the abstract class and returns the native Document object.
 */
export declare class BrowserDocumentRef extends DocumentRef {
    constructor();
    /**
     * @returns Document object
     */
    get nativeDocument(): Document | Object;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BrowserDocumentRef>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<BrowserDocumentRef>;
}
/**
 * Create an factory function that returns the native Document object.
 * @param browserDocumentRef Native Document object
 * @param platformId id of platform
 * @returns type of platform of empty object
 */
export declare function documentFactory(browserDocumentRef: BrowserDocumentRef, platformId: Object): Document | Object;
/**
 * Create a injectable provider for the DocumentRef token that uses the BrowserDocumentRef class.
 */
export declare const browserDocumentProvider: ClassProvider;
/**
 * Create an injectable provider that uses the DocumentFactory function for returning the native Document object.
 */
export declare const documentProvider: FactoryProvider;
/**
 * Create an array of providers.
 */
export declare const DOCUMENT_PROVIDERS: (ClassProvider | FactoryProvider)[];

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jdW1lbnQtcmVmLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiZG9jdW1lbnQtcmVmLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2xhc3NQcm92aWRlciwgRmFjdG9yeVByb3ZpZGVyLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG4vKipcclxuICogQ3JlYXRlIGEgbmV3IGluamVjdGlvbiB0b2tlbiBmb3IgaW5qZWN0aW5nIHRoZSBEb2N1bWVudCBpbnRvIGEgY29tcG9uZW50LlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY29uc3QgRE9DVU1FTlQ6IEluamVjdGlvblRva2VuPERvY3VtZW50PjtcclxuLyoqXHJcbiAqIERlZmluZSBhYnN0cmFjdCBjbGFzcyBmb3Igb2J0YWluaW5nIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIERvY3VtZW50IG9iamVjdC5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIERvY3VtZW50UmVmIHtcclxuICAgIGdldCBuYXRpdmVEb2N1bWVudCgpOiBEb2N1bWVudCB8IE9iamVjdDtcclxufVxyXG4vKipcclxuICogRGVmaW5lIGNsYXNzIHRoYXQgaW1wbGVtZW50cyB0aGUgYWJzdHJhY3QgY2xhc3MgYW5kIHJldHVybnMgdGhlIG5hdGl2ZSBEb2N1bWVudCBvYmplY3QuXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBCcm93c2VyRG9jdW1lbnRSZWYgZXh0ZW5kcyBEb2N1bWVudFJlZiB7XHJcbiAgICBjb25zdHJ1Y3RvcigpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJucyBEb2N1bWVudCBvYmplY3RcclxuICAgICAqL1xyXG4gICAgZ2V0IG5hdGl2ZURvY3VtZW50KCk6IERvY3VtZW50IHwgT2JqZWN0O1xyXG59XHJcbi8qKlxyXG4gKiBDcmVhdGUgYW4gZmFjdG9yeSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5hdGl2ZSBEb2N1bWVudCBvYmplY3QuXHJcbiAqIEBwYXJhbSBicm93c2VyRG9jdW1lbnRSZWYgTmF0aXZlIERvY3VtZW50IG9iamVjdFxyXG4gKiBAcGFyYW0gcGxhdGZvcm1JZCBpZCBvZiBwbGF0Zm9ybVxyXG4gKiBAcmV0dXJucyB0eXBlIG9mIHBsYXRmb3JtIG9mIGVtcHR5IG9iamVjdFxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gZG9jdW1lbnRGYWN0b3J5KGJyb3dzZXJEb2N1bWVudFJlZjogQnJvd3NlckRvY3VtZW50UmVmLCBwbGF0Zm9ybUlkOiBPYmplY3QpOiBEb2N1bWVudCB8IE9iamVjdDtcclxuLyoqXHJcbiAqIENyZWF0ZSBhIGluamVjdGFibGUgcHJvdmlkZXIgZm9yIHRoZSBEb2N1bWVudFJlZiB0b2tlbiB0aGF0IHVzZXMgdGhlIEJyb3dzZXJEb2N1bWVudFJlZiBjbGFzcy5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGJyb3dzZXJEb2N1bWVudFByb3ZpZGVyOiBDbGFzc1Byb3ZpZGVyO1xyXG4vKipcclxuICogQ3JlYXRlIGFuIGluamVjdGFibGUgcHJvdmlkZXIgdGhhdCB1c2VzIHRoZSBEb2N1bWVudEZhY3RvcnkgZnVuY3Rpb24gZm9yIHJldHVybmluZyB0aGUgbmF0aXZlIERvY3VtZW50IG9iamVjdC5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGRvY3VtZW50UHJvdmlkZXI6IEZhY3RvcnlQcm92aWRlcjtcclxuLyoqXHJcbiAqIENyZWF0ZSBhbiBhcnJheSBvZiBwcm92aWRlcnMuXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjb25zdCBET0NVTUVOVF9QUk9WSURFUlM6IChDbGFzc1Byb3ZpZGVyIHwgRmFjdG9yeVByb3ZpZGVyKVtdO1xyXG4iXX0=