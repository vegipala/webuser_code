import { OnDestroy } from '@angular/core';
import { Subscription } from 'rxjs';
import { CarouselService } from './carousel.service';
import * as ɵngcc0 from '@angular/core';
export declare class AutoplayService implements OnDestroy {
    private carouselService;
    /**
     * Subscrioption to merge Observables from CarouselService
     */
    autoplaySubscription: Subscription;
    /**
     * The autoplay timeout.
     */
    private _timeout;
    /**
     * Indicates whenever the autoplay is paused.
     */
    private _paused;
    /**
     * Shows whether the code (the plugin) changed the option 'AutoplayTimeout' for own needs
     */
    private _isArtificialAutoplayTimeout;
    private winRef;
    private docRef;
    constructor(carouselService: CarouselService, winRef: any, docRef: any);
    ngOnDestroy(): void;
    /**
     * Defines Observables which service must observe
     */
    spyDataStreams(): void;
    /**
       * Starts the autoplay.
       * @param timeout The interval before the next animation starts.
       * @param speed The animation speed for the animations.
       */
    play(timeout?: number, speed?: number): void;
    /**
       * Gets a new timeout
       * @param timeout - The interval before the next animation starts.
       * @param speed - The animation speed for the animations.
       * @return
       */
    private _getNextTimeout;
    /**
       * Sets autoplay in motion.
       */
    private _setAutoPlayInterval;
    /**
     * Stops the autoplay.
     */
    stop(): void;
    /**
       * Stops the autoplay.
       */
    pause(): void;
    /**
     * Manages by autoplaying according to data passed by _changedSettingsCarousel$ Obsarvable
     * @param data object with current position of carousel and type of change
     */
    private _handleChangeObservable;
    /**
     * Starts autoplaying of the carousel in the case when user leaves the carousel before it starts translateing (moving)
     */
    private _playAfterTranslated;
    /**
     * Starts pausing
     */
    startPausing(): void;
    /**
     * Starts playing after mouse leaves carousel
     */
    startPlayingMouseLeave(): void;
    /**
     * Starts playing after touch ends
     */
    startPlayingTouchEnd(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AutoplayService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<AutoplayService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b3BsYXkuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJhdXRvcGxheS5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3RUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IENhcm91c2VsU2VydmljZSB9IGZyb20gJy4vY2Fyb3VzZWwuc2VydmljZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEF1dG9wbGF5U2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XHJcbiAgICBwcml2YXRlIGNhcm91c2VsU2VydmljZTtcclxuICAgIC8qKlxyXG4gICAgICogU3Vic2NyaW9wdGlvbiB0byBtZXJnZSBPYnNlcnZhYmxlcyBmcm9tIENhcm91c2VsU2VydmljZVxyXG4gICAgICovXHJcbiAgICBhdXRvcGxheVN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgYXV0b3BsYXkgdGltZW91dC5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfdGltZW91dDtcclxuICAgIC8qKlxyXG4gICAgICogSW5kaWNhdGVzIHdoZW5ldmVyIHRoZSBhdXRvcGxheSBpcyBwYXVzZWQuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX3BhdXNlZDtcclxuICAgIC8qKlxyXG4gICAgICogU2hvd3Mgd2hldGhlciB0aGUgY29kZSAodGhlIHBsdWdpbikgY2hhbmdlZCB0aGUgb3B0aW9uICdBdXRvcGxheVRpbWVvdXQnIGZvciBvd24gbmVlZHNcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfaXNBcnRpZmljaWFsQXV0b3BsYXlUaW1lb3V0O1xyXG4gICAgcHJpdmF0ZSB3aW5SZWY7XHJcbiAgICBwcml2YXRlIGRvY1JlZjtcclxuICAgIGNvbnN0cnVjdG9yKGNhcm91c2VsU2VydmljZTogQ2Fyb3VzZWxTZXJ2aWNlLCB3aW5SZWY6IGFueSwgZG9jUmVmOiBhbnkpO1xyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogRGVmaW5lcyBPYnNlcnZhYmxlcyB3aGljaCBzZXJ2aWNlIG11c3Qgb2JzZXJ2ZVxyXG4gICAgICovXHJcbiAgICBzcHlEYXRhU3RyZWFtcygpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgICAqIFN0YXJ0cyB0aGUgYXV0b3BsYXkuXHJcbiAgICAgICAqIEBwYXJhbSB0aW1lb3V0IFRoZSBpbnRlcnZhbCBiZWZvcmUgdGhlIG5leHQgYW5pbWF0aW9uIHN0YXJ0cy5cclxuICAgICAgICogQHBhcmFtIHNwZWVkIFRoZSBhbmltYXRpb24gc3BlZWQgZm9yIHRoZSBhbmltYXRpb25zLlxyXG4gICAgICAgKi9cclxuICAgIHBsYXkodGltZW91dD86IG51bWJlciwgc3BlZWQ/OiBudW1iZXIpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgICAqIEdldHMgYSBuZXcgdGltZW91dFxyXG4gICAgICAgKiBAcGFyYW0gdGltZW91dCAtIFRoZSBpbnRlcnZhbCBiZWZvcmUgdGhlIG5leHQgYW5pbWF0aW9uIHN0YXJ0cy5cclxuICAgICAgICogQHBhcmFtIHNwZWVkIC0gVGhlIGFuaW1hdGlvbiBzcGVlZCBmb3IgdGhlIGFuaW1hdGlvbnMuXHJcbiAgICAgICAqIEByZXR1cm5cclxuICAgICAgICovXHJcbiAgICBwcml2YXRlIF9nZXROZXh0VGltZW91dDtcclxuICAgIC8qKlxyXG4gICAgICAgKiBTZXRzIGF1dG9wbGF5IGluIG1vdGlvbi5cclxuICAgICAgICovXHJcbiAgICBwcml2YXRlIF9zZXRBdXRvUGxheUludGVydmFsO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9wcyB0aGUgYXV0b3BsYXkuXHJcbiAgICAgKi9cclxuICAgIHN0b3AoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICAgKiBTdG9wcyB0aGUgYXV0b3BsYXkuXHJcbiAgICAgICAqL1xyXG4gICAgcGF1c2UoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogTWFuYWdlcyBieSBhdXRvcGxheWluZyBhY2NvcmRpbmcgdG8gZGF0YSBwYXNzZWQgYnkgX2NoYW5nZWRTZXR0aW5nc0Nhcm91c2VsJCBPYnNhcnZhYmxlXHJcbiAgICAgKiBAcGFyYW0gZGF0YSBvYmplY3Qgd2l0aCBjdXJyZW50IHBvc2l0aW9uIG9mIGNhcm91c2VsIGFuZCB0eXBlIG9mIGNoYW5nZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9oYW5kbGVDaGFuZ2VPYnNlcnZhYmxlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdGFydHMgYXV0b3BsYXlpbmcgb2YgdGhlIGNhcm91c2VsIGluIHRoZSBjYXNlIHdoZW4gdXNlciBsZWF2ZXMgdGhlIGNhcm91c2VsIGJlZm9yZSBpdCBzdGFydHMgdHJhbnNsYXRlaW5nIChtb3ZpbmcpXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX3BsYXlBZnRlclRyYW5zbGF0ZWQ7XHJcbiAgICAvKipcclxuICAgICAqIFN0YXJ0cyBwYXVzaW5nXHJcbiAgICAgKi9cclxuICAgIHN0YXJ0UGF1c2luZygpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdGFydHMgcGxheWluZyBhZnRlciBtb3VzZSBsZWF2ZXMgY2Fyb3VzZWxcclxuICAgICAqL1xyXG4gICAgc3RhcnRQbGF5aW5nTW91c2VMZWF2ZSgpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdGFydHMgcGxheWluZyBhZnRlciB0b3VjaCBlbmRzXHJcbiAgICAgKi9cclxuICAgIHN0YXJ0UGxheWluZ1RvdWNoRW5kKCk6IHZvaWQ7XHJcbn1cclxuIl19