import { ChangeDetectorRef, OnInit, OnDestroy, NgZone } from '@angular/core';
import { ToasterConfig } from './toaster-config';
import { ToasterService } from './toaster.service';
import { Toast } from './toast';
import * as ɵngcc0 from '@angular/core';
export declare class ToasterContainerComponent implements OnInit, OnDestroy {
    private ref;
    private ngZone;
    private addToastSubscriber;
    private clearToastsSubscriber;
    private toasterService;
    private timeoutIds;
    toasterconfig: ToasterConfig;
    toasts: Toast[];
    constructor(toasterService: ToasterService, ref: ChangeDetectorRef, ngZone: NgZone);
    ngOnInit(): void;
    click(toast: Toast, isCloseButton?: boolean): false | undefined;
    childClick($event: any): void;
    stopTimer(toast: Toast): void;
    restartTimer(toast: Toast): void;
    private registerSubscribers;
    private addToast;
    private configureTimer;
    private isLimitExceeded;
    private removeToast;
    private removeAllToasts;
    private clearToasts;
    private clearToastsAction;
    private toastIdOrDefault;
    private isNullOrUndefined;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ToasterContainerComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ToasterContainerComponent, "toaster-container", never, {
    "toasterconfig": "toasterconfig";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3Rlci1jb250YWluZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRvYXN0ZXItY29udGFpbmVyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEwQkEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgT25Jbml0LCBPbkRlc3Ryb3ksIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVG9hc3RlckNvbmZpZyB9IGZyb20gJy4vdG9hc3Rlci1jb25maWcnO1xuaW1wb3J0IHsgVG9hc3RlclNlcnZpY2UgfSBmcm9tICcuL3RvYXN0ZXIuc2VydmljZSc7XG5pbXBvcnQgeyBUb2FzdCB9IGZyb20gJy4vdG9hc3QnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVG9hc3RlckNvbnRhaW5lckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHJlZjtcbiAgICBwcml2YXRlIG5nWm9uZTtcbiAgICBwcml2YXRlIGFkZFRvYXN0U3Vic2NyaWJlcjtcbiAgICBwcml2YXRlIGNsZWFyVG9hc3RzU3Vic2NyaWJlcjtcbiAgICBwcml2YXRlIHRvYXN0ZXJTZXJ2aWNlO1xuICAgIHByaXZhdGUgdGltZW91dElkcztcbiAgICB0b2FzdGVyY29uZmlnOiBUb2FzdGVyQ29uZmlnO1xuICAgIHRvYXN0czogVG9hc3RbXTtcbiAgICBjb25zdHJ1Y3Rvcih0b2FzdGVyU2VydmljZTogVG9hc3RlclNlcnZpY2UsIHJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsIG5nWm9uZTogTmdab25lKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIGNsaWNrKHRvYXN0OiBUb2FzdCwgaXNDbG9zZUJ1dHRvbj86IGJvb2xlYW4pOiBmYWxzZSB8IHVuZGVmaW5lZDtcbiAgICBjaGlsZENsaWNrKCRldmVudDogYW55KTogdm9pZDtcbiAgICBzdG9wVGltZXIodG9hc3Q6IFRvYXN0KTogdm9pZDtcbiAgICByZXN0YXJ0VGltZXIodG9hc3Q6IFRvYXN0KTogdm9pZDtcbiAgICBwcml2YXRlIHJlZ2lzdGVyU3Vic2NyaWJlcnM7XG4gICAgcHJpdmF0ZSBhZGRUb2FzdDtcbiAgICBwcml2YXRlIGNvbmZpZ3VyZVRpbWVyO1xuICAgIHByaXZhdGUgaXNMaW1pdEV4Y2VlZGVkO1xuICAgIHByaXZhdGUgcmVtb3ZlVG9hc3Q7XG4gICAgcHJpdmF0ZSByZW1vdmVBbGxUb2FzdHM7XG4gICAgcHJpdmF0ZSBjbGVhclRvYXN0cztcbiAgICBwcml2YXRlIGNsZWFyVG9hc3RzQWN0aW9uO1xuICAgIHByaXZhdGUgdG9hc3RJZE9yRGVmYXVsdDtcbiAgICBwcml2YXRlIGlzTnVsbE9yVW5kZWZpbmVkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG4iXX0=