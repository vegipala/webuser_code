import { Toast } from './toast';
import { IClearWrapper } from './clearWrapper';
import { Observable, Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class ToasterService {
    addToast: Observable<Toast>;
    private _addToast;
    clearToasts: Observable<IClearWrapper>;
    private _clearToasts;
    removeToast: Observable<IClearWrapper>;
    /** @internal */
    _removeToastSubject: Subject<IClearWrapper>;
    /**
     * Creates an instance of ToasterService.
     */
    constructor();
    /**
     * Synchronously create and show a new toast instance.
     *
     * @param {(string | Toast)} type The type of the toast, or a Toast object.
     * @param {string=} title The toast title.
     * @param {string=} body The toast body.
     * @returns {Toast}
     *          The newly created Toast instance with a randomly generated GUID Id.
     */
    pop(type: string | Toast, title?: string, body?: string): Toast;
    /**
     * Asynchronously create and show a new toast instance.
     *
     * @param {(string | Toast)} type The type of the toast, or a Toast object.
     * @param {string=} title The toast title.
     * @param {string=} body The toast body.
     * @returns {Observable<Toast>}
     *          A hot Observable that can be subscribed to in order to receive the Toast instance
     *          with a randomly generated GUID Id.
     */
    popAsync(type: string | Toast, title?: string, body?: string): Observable<Toast>;
    /**
     * Clears a toast by toastId and/or toastContainerId.
     *
     * @param {string} toastId The toastId to clear.
     * @param {number=} toastContainerId
     *        The toastContainerId of the container to remove toasts from.
     */
    clear(toastId?: string, toastContainerId?: number): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ToasterService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ToasterService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3Rlci5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbInRvYXN0ZXIuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5Q0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUb2FzdCB9IGZyb20gJy4vdG9hc3QnO1xuaW1wb3J0IHsgSUNsZWFyV3JhcHBlciB9IGZyb20gJy4vY2xlYXJXcmFwcGVyJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRvYXN0ZXJTZXJ2aWNlIHtcbiAgICBhZGRUb2FzdDogT2JzZXJ2YWJsZTxUb2FzdD47XG4gICAgcHJpdmF0ZSBfYWRkVG9hc3Q7XG4gICAgY2xlYXJUb2FzdHM6IE9ic2VydmFibGU8SUNsZWFyV3JhcHBlcj47XG4gICAgcHJpdmF0ZSBfY2xlYXJUb2FzdHM7XG4gICAgcmVtb3ZlVG9hc3Q6IE9ic2VydmFibGU8SUNsZWFyV3JhcHBlcj47XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9yZW1vdmVUb2FzdFN1YmplY3Q6IFN1YmplY3Q8SUNsZWFyV3JhcHBlcj47XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBUb2FzdGVyU2VydmljZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpO1xuICAgIC8qKlxuICAgICAqIFN5bmNocm9ub3VzbHkgY3JlYXRlIGFuZCBzaG93IGEgbmV3IHRvYXN0IGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsoc3RyaW5nIHwgVG9hc3QpfSB0eXBlIFRoZSB0eXBlIG9mIHRoZSB0b2FzdCwgb3IgYSBUb2FzdCBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSB0aXRsZSBUaGUgdG9hc3QgdGl0bGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBib2R5IFRoZSB0b2FzdCBib2R5LlxuICAgICAqIEByZXR1cm5zIHtUb2FzdH1cbiAgICAgKiAgICAgICAgICBUaGUgbmV3bHkgY3JlYXRlZCBUb2FzdCBpbnN0YW5jZSB3aXRoIGEgcmFuZG9tbHkgZ2VuZXJhdGVkIEdVSUQgSWQuXG4gICAgICovXG4gICAgcG9wKHR5cGU6IHN0cmluZyB8IFRvYXN0LCB0aXRsZT86IHN0cmluZywgYm9keT86IHN0cmluZyk6IFRvYXN0O1xuICAgIC8qKlxuICAgICAqIEFzeW5jaHJvbm91c2x5IGNyZWF0ZSBhbmQgc2hvdyBhIG5ldyB0b2FzdCBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7KHN0cmluZyB8IFRvYXN0KX0gdHlwZSBUaGUgdHlwZSBvZiB0aGUgdG9hc3QsIG9yIGEgVG9hc3Qgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gdGl0bGUgVGhlIHRvYXN0IHRpdGxlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gYm9keSBUaGUgdG9hc3QgYm9keS5cbiAgICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxUb2FzdD59XG4gICAgICogICAgICAgICAgQSBob3QgT2JzZXJ2YWJsZSB0aGF0IGNhbiBiZSBzdWJzY3JpYmVkIHRvIGluIG9yZGVyIHRvIHJlY2VpdmUgdGhlIFRvYXN0IGluc3RhbmNlXG4gICAgICogICAgICAgICAgd2l0aCBhIHJhbmRvbWx5IGdlbmVyYXRlZCBHVUlEIElkLlxuICAgICAqL1xuICAgIHBvcEFzeW5jKHR5cGU6IHN0cmluZyB8IFRvYXN0LCB0aXRsZT86IHN0cmluZywgYm9keT86IHN0cmluZyk6IE9ic2VydmFibGU8VG9hc3Q+O1xuICAgIC8qKlxuICAgICAqIENsZWFycyBhIHRvYXN0IGJ5IHRvYXN0SWQgYW5kL29yIHRvYXN0Q29udGFpbmVySWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdG9hc3RJZCBUaGUgdG9hc3RJZCB0byBjbGVhci5cbiAgICAgKiBAcGFyYW0ge251bWJlcj19IHRvYXN0Q29udGFpbmVySWRcbiAgICAgKiAgICAgICAgVGhlIHRvYXN0Q29udGFpbmVySWQgb2YgdGhlIGNvbnRhaW5lciB0byByZW1vdmUgdG9hc3RzIGZyb20uXG4gICAgICovXG4gICAgY2xlYXIodG9hc3RJZD86IHN0cmluZywgdG9hc3RDb250YWluZXJJZD86IG51bWJlcik6IHZvaWQ7XG59XG4iXX0=