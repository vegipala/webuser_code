/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-skeleton-loader.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, isDevMode } from '@angular/core';
var NgxSkeletonLoaderComponent = /** @class */ (function () {
    function NgxSkeletonLoaderComponent() {
        this.count = 1;
        this.appearance = '';
        this.animation = 'progress';
        this.theme = {};
        this.items = [];
    }
    /**
     * @return {?}
     */
    NgxSkeletonLoaderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.items.length = this.count;
        /** @type {?} */
        var allowedAnimations = ['progress', 'progress-dark', 'pulse', 'false'];
        if (!allowedAnimations.includes(this.animation)) {
            // Shows error message only in Development
            if (isDevMode()) {
                console.error("`NgxSkeletonLoaderComponent` need to receive 'animation' as: " + allowedAnimations.join(', ') + ". Forcing default to \"progress\".");
            }
            this.animation = 'progress';
        }
    };
    NgxSkeletonLoaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-skeleton-loader',
                    template: "<span\n  *ngFor=\"let item of items\"\n  class=\"loader\"\n  aria-busy=\"true\"\n  aria-valuemin=\"0\"\n  aria-valuemax=\"100\"\n  aria-valuetext=\"Loading...\"\n  role=\"progressbar\"\n  tabindex=\"0\"\n  [ngClass]=\"{\n    circle: appearance === 'circle',\n    progress: animation === 'progress',\n    'progress-dark': animation === 'progress-dark',\n    pulse: animation === 'pulse'\n  }\"\n  [ngStyle]=\"theme\"\n>\n</span>\n",
                    styles: [".loader{box-sizing:border-box;overflow:hidden;position:relative;background:no-repeat #eff1f6;border-radius:4px;width:100%;height:20px;display:inline-block;margin-bottom:10px;will-change:transform}.loader:after,.loader:before{box-sizing:border-box}.loader.circle{width:40px;height:40px;margin:5px;border-radius:50%}.loader.progress,.loader.progress-dark{-webkit-animation:2s ease-in-out infinite progress;animation:2s ease-in-out infinite progress;background-size:200px 100%}.loader.progress{background-image:linear-gradient(90deg,rgba(255,255,255,0),rgba(255,255,255,.6),rgba(255,255,255,0))}.loader.progress-dark{background-image:linear-gradient(90deg,transparent,rgba(0,0,0,.2),transparent)}.loader.pulse{-webkit-animation:1.5s ease-in-out .5s infinite pulse;animation:1.5s ease-in-out .5s infinite pulse}@media (prefers-reduced-motion:reduce){.loader.progress,.loader.progress-dark,.loader.pulse{-webkit-animation:none;animation:none}.loader.progress,.loader.progress-dark{background-image:none}}@-webkit-keyframes progress{0%{background-position:-200px 0}100%{background-position:calc(200px + 100%) 0}}@keyframes progress{0%{background-position:-200px 0}100%{background-position:calc(200px + 100%) 0}}@-webkit-keyframes pulse{0%,100%{opacity:1}50%{opacity:.4}}@keyframes pulse{0%,100%{opacity:1}50%{opacity:.4}}"]
                }] }
    ];
    NgxSkeletonLoaderComponent.propDecorators = {
        count: [{ type: Input }],
        appearance: [{ type: Input }],
        animation: [{ type: Input }],
        theme: [{ type: Input }]
    };
    return NgxSkeletonLoaderComponent;
}());
export { NgxSkeletonLoaderComponent };
if (false) {
    /** @type {?} */
    NgxSkeletonLoaderComponent.prototype.count;
    /** @type {?} */
    NgxSkeletonLoaderComponent.prototype.appearance;
    /** @type {?} */
    NgxSkeletonLoaderComponent.prototype.animation;
    /** @type {?} */
    NgxSkeletonLoaderComponent.prototype.theme;
    /** @type {?} */
    NgxSkeletonLoaderComponent.prototype.items;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNrZWxldG9uLWxvYWRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2tlbGV0b24tbG9hZGVyLyIsInNvdXJjZXMiOlsibGliL25neC1za2VsZXRvbi1sb2FkZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXBFO0lBQUE7UUFPRSxVQUFLLEdBQUcsQ0FBQyxDQUFDO1FBR1YsZUFBVSxHQUFrQixFQUFFLENBQUM7UUFHL0IsY0FBUyxHQUFxRCxVQUFVLENBQUM7UUFFaEUsVUFBSyxHQUE0QixFQUFFLENBQUM7UUFFN0MsVUFBSyxHQUFlLEVBQUUsQ0FBQztJQWlCekIsQ0FBQzs7OztJQWZDLDZDQUFROzs7SUFBUjtRQUNFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7O1lBQ3pCLGlCQUFpQixHQUFHLENBQUMsVUFBVSxFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDO1FBQ3pFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQy9DLDBDQUEwQztZQUMxQyxJQUFJLFNBQVMsRUFBRSxFQUFFO2dCQUNmLE9BQU8sQ0FBQyxLQUFLLENBQ1gsa0VBQWtFLGlCQUFpQixDQUFDLElBQUksQ0FDdEYsSUFBSSxDQUNMLHVDQUFrQyxDQUNwQyxDQUFDO2FBQ0g7WUFDRCxJQUFJLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQztTQUM3QjtJQUNILENBQUM7O2dCQWpDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtvQkFDL0IseWJBQXlDOztpQkFFMUM7Ozt3QkFFRSxLQUFLOzZCQUdMLEtBQUs7NEJBR0wsS0FBSzt3QkFHTCxLQUFLOztJQW1CUixpQ0FBQztDQUFBLEFBbENELElBa0NDO1NBN0JZLDBCQUEwQjs7O0lBQ3JDLDJDQUNVOztJQUVWLGdEQUMrQjs7SUFFL0IsK0NBQ3lFOztJQUV6RSwyQ0FBNkM7O0lBRTdDLDJDQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgaXNEZXZNb2RlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC1za2VsZXRvbi1sb2FkZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vbmd4LXNrZWxldG9uLWxvYWRlci5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbmd4LXNrZWxldG9uLWxvYWRlci5zY3NzJ10sXG59KVxuZXhwb3J0IGNsYXNzIE5neFNrZWxldG9uTG9hZGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KClcbiAgY291bnQgPSAxO1xuXG4gIEBJbnB1dCgpXG4gIGFwcGVhcmFuY2U6ICdjaXJjbGUnIHwgJycgPSAnJztcblxuICBASW5wdXQoKVxuICBhbmltYXRpb246ICdwcm9ncmVzcycgfCAncHJvZ3Jlc3MtZGFyaycgfCAncHVsc2UnIHwgJ2ZhbHNlJyA9ICdwcm9ncmVzcyc7XG5cbiAgQElucHV0KCkgdGhlbWU6IHsgW2s6IHN0cmluZ106IHN0cmluZyB9ID0ge307XG5cbiAgaXRlbXM6IEFycmF5PGFueT4gPSBbXTtcblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLml0ZW1zLmxlbmd0aCA9IHRoaXMuY291bnQ7XG4gICAgY29uc3QgYWxsb3dlZEFuaW1hdGlvbnMgPSBbJ3Byb2dyZXNzJywgJ3Byb2dyZXNzLWRhcmsnLCAncHVsc2UnLCAnZmFsc2UnXTtcbiAgICBpZiAoIWFsbG93ZWRBbmltYXRpb25zLmluY2x1ZGVzKHRoaXMuYW5pbWF0aW9uKSkge1xuICAgICAgLy8gU2hvd3MgZXJyb3IgbWVzc2FnZSBvbmx5IGluIERldmVsb3BtZW50XG4gICAgICBpZiAoaXNEZXZNb2RlKCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICBgXFxgTmd4U2tlbGV0b25Mb2FkZXJDb21wb25lbnRcXGAgbmVlZCB0byByZWNlaXZlICdhbmltYXRpb24nIGFzOiAke2FsbG93ZWRBbmltYXRpb25zLmpvaW4oXG4gICAgICAgICAgICAnLCAnXG4gICAgICAgICAgKX0uIEZvcmNpbmcgZGVmYXVsdCB0byBcInByb2dyZXNzXCIuYFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdGhpcy5hbmltYXRpb24gPSAncHJvZ3Jlc3MnO1xuICAgIH1cbiAgfVxufVxuIl19