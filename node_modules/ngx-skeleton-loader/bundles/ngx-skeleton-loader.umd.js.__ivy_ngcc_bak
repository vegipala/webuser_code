(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-skeleton-loader', ['exports', '@angular/core', '@angular/common'], factory) :
    (global = global || self, factory(global['ngx-skeleton-loader'] = {}, global.ng.core, global.ng.common));
}(this, (function (exports, core, common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/ngx-skeleton-loader.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxSkeletonLoaderComponent = /** @class */ (function () {
        function NgxSkeletonLoaderComponent() {
            this.count = 1;
            this.appearance = '';
            this.animation = 'progress';
            this.theme = {};
            this.items = [];
        }
        /**
         * @return {?}
         */
        NgxSkeletonLoaderComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.items.length = this.count;
            /** @type {?} */
            var allowedAnimations = ['progress', 'progress-dark', 'pulse', 'false'];
            if (!allowedAnimations.includes(this.animation)) {
                // Shows error message only in Development
                if (core.isDevMode()) {
                    console.error("`NgxSkeletonLoaderComponent` need to receive 'animation' as: " + allowedAnimations.join(', ') + ". Forcing default to \"progress\".");
                }
                this.animation = 'progress';
            }
        };
        NgxSkeletonLoaderComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-skeleton-loader',
                        template: "<span\n  *ngFor=\"let item of items\"\n  class=\"loader\"\n  aria-busy=\"true\"\n  aria-valuemin=\"0\"\n  aria-valuemax=\"100\"\n  aria-valuetext=\"Loading...\"\n  role=\"progressbar\"\n  tabindex=\"0\"\n  [ngClass]=\"{\n    circle: appearance === 'circle',\n    progress: animation === 'progress',\n    'progress-dark': animation === 'progress-dark',\n    pulse: animation === 'pulse'\n  }\"\n  [ngStyle]=\"theme\"\n>\n</span>\n",
                        styles: [".loader{box-sizing:border-box;overflow:hidden;position:relative;background:no-repeat #eff1f6;border-radius:4px;width:100%;height:20px;display:inline-block;margin-bottom:10px;will-change:transform}.loader:after,.loader:before{box-sizing:border-box}.loader.circle{width:40px;height:40px;margin:5px;border-radius:50%}.loader.progress,.loader.progress-dark{-webkit-animation:2s ease-in-out infinite progress;animation:2s ease-in-out infinite progress;background-size:200px 100%}.loader.progress{background-image:linear-gradient(90deg,rgba(255,255,255,0),rgba(255,255,255,.6),rgba(255,255,255,0))}.loader.progress-dark{background-image:linear-gradient(90deg,transparent,rgba(0,0,0,.2),transparent)}.loader.pulse{-webkit-animation:1.5s ease-in-out .5s infinite pulse;animation:1.5s ease-in-out .5s infinite pulse}@media (prefers-reduced-motion:reduce){.loader.progress,.loader.progress-dark,.loader.pulse{-webkit-animation:none;animation:none}.loader.progress,.loader.progress-dark{background-image:none}}@-webkit-keyframes progress{0%{background-position:-200px 0}100%{background-position:calc(200px + 100%) 0}}@keyframes progress{0%{background-position:-200px 0}100%{background-position:calc(200px + 100%) 0}}@-webkit-keyframes pulse{0%,100%{opacity:1}50%{opacity:.4}}@keyframes pulse{0%,100%{opacity:1}50%{opacity:.4}}"]
                    }] }
        ];
        NgxSkeletonLoaderComponent.propDecorators = {
            count: [{ type: core.Input }],
            appearance: [{ type: core.Input }],
            animation: [{ type: core.Input }],
            theme: [{ type: core.Input }]
        };
        return NgxSkeletonLoaderComponent;
    }());
    if (false) {
        /** @type {?} */
        NgxSkeletonLoaderComponent.prototype.count;
        /** @type {?} */
        NgxSkeletonLoaderComponent.prototype.appearance;
        /** @type {?} */
        NgxSkeletonLoaderComponent.prototype.animation;
        /** @type {?} */
        NgxSkeletonLoaderComponent.prototype.theme;
        /** @type {?} */
        NgxSkeletonLoaderComponent.prototype.items;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/ngx-skeleton-loader.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxSkeletonLoaderModule = /** @class */ (function () {
        function NgxSkeletonLoaderModule() {
        }
        NgxSkeletonLoaderModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgxSkeletonLoaderComponent],
                        imports: [common.CommonModule],
                        exports: [NgxSkeletonLoaderComponent],
                    },] }
        ];
        return NgxSkeletonLoaderModule;
    }());

    exports.NgxSkeletonLoaderComponent = NgxSkeletonLoaderComponent;
    exports.NgxSkeletonLoaderModule = NgxSkeletonLoaderModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-skeleton-loader.umd.js.map
