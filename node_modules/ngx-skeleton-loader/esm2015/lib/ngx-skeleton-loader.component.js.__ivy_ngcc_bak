/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-skeleton-loader.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, isDevMode } from '@angular/core';
export class NgxSkeletonLoaderComponent {
    constructor() {
        this.count = 1;
        this.appearance = '';
        this.animation = 'progress';
        this.theme = {};
        this.items = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.items.length = this.count;
        /** @type {?} */
        const allowedAnimations = ['progress', 'progress-dark', 'pulse', 'false'];
        if (!allowedAnimations.includes(this.animation)) {
            // Shows error message only in Development
            if (isDevMode()) {
                console.error(`\`NgxSkeletonLoaderComponent\` need to receive 'animation' as: ${allowedAnimations.join(', ')}. Forcing default to "progress".`);
            }
            this.animation = 'progress';
        }
    }
}
NgxSkeletonLoaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-skeleton-loader',
                template: "<span\n  *ngFor=\"let item of items\"\n  class=\"loader\"\n  aria-busy=\"true\"\n  aria-valuemin=\"0\"\n  aria-valuemax=\"100\"\n  aria-valuetext=\"Loading...\"\n  role=\"progressbar\"\n  tabindex=\"0\"\n  [ngClass]=\"{\n    circle: appearance === 'circle',\n    progress: animation === 'progress',\n    'progress-dark': animation === 'progress-dark',\n    pulse: animation === 'pulse'\n  }\"\n  [ngStyle]=\"theme\"\n>\n</span>\n",
                styles: [".loader{box-sizing:border-box;overflow:hidden;position:relative;background:no-repeat #eff1f6;border-radius:4px;width:100%;height:20px;display:inline-block;margin-bottom:10px;will-change:transform}.loader:after,.loader:before{box-sizing:border-box}.loader.circle{width:40px;height:40px;margin:5px;border-radius:50%}.loader.progress,.loader.progress-dark{-webkit-animation:2s ease-in-out infinite progress;animation:2s ease-in-out infinite progress;background-size:200px 100%}.loader.progress{background-image:linear-gradient(90deg,rgba(255,255,255,0),rgba(255,255,255,.6),rgba(255,255,255,0))}.loader.progress-dark{background-image:linear-gradient(90deg,transparent,rgba(0,0,0,.2),transparent)}.loader.pulse{-webkit-animation:1.5s ease-in-out .5s infinite pulse;animation:1.5s ease-in-out .5s infinite pulse}@media (prefers-reduced-motion:reduce){.loader.progress,.loader.progress-dark,.loader.pulse{-webkit-animation:none;animation:none}.loader.progress,.loader.progress-dark{background-image:none}}@-webkit-keyframes progress{0%{background-position:-200px 0}100%{background-position:calc(200px + 100%) 0}}@keyframes progress{0%{background-position:-200px 0}100%{background-position:calc(200px + 100%) 0}}@-webkit-keyframes pulse{0%,100%{opacity:1}50%{opacity:.4}}@keyframes pulse{0%,100%{opacity:1}50%{opacity:.4}}"]
            }] }
];
NgxSkeletonLoaderComponent.propDecorators = {
    count: [{ type: Input }],
    appearance: [{ type: Input }],
    animation: [{ type: Input }],
    theme: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgxSkeletonLoaderComponent.prototype.count;
    /** @type {?} */
    NgxSkeletonLoaderComponent.prototype.appearance;
    /** @type {?} */
    NgxSkeletonLoaderComponent.prototype.animation;
    /** @type {?} */
    NgxSkeletonLoaderComponent.prototype.theme;
    /** @type {?} */
    NgxSkeletonLoaderComponent.prototype.items;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNrZWxldG9uLWxvYWRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2tlbGV0b24tbG9hZGVyLyIsInNvdXJjZXMiOlsibGliL25neC1za2VsZXRvbi1sb2FkZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBT3BFLE1BQU0sT0FBTywwQkFBMEI7SUFMdkM7UUFPRSxVQUFLLEdBQUcsQ0FBQyxDQUFDO1FBR1YsZUFBVSxHQUFrQixFQUFFLENBQUM7UUFHL0IsY0FBUyxHQUFxRCxVQUFVLENBQUM7UUFFaEUsVUFBSyxHQUE0QixFQUFFLENBQUM7UUFFN0MsVUFBSyxHQUFlLEVBQUUsQ0FBQztJQWlCekIsQ0FBQzs7OztJQWZDLFFBQVE7UUFDTixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDOztjQUN6QixpQkFBaUIsR0FBRyxDQUFDLFVBQVUsRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQztRQUN6RSxJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUMvQywwQ0FBMEM7WUFDMUMsSUFBSSxTQUFTLEVBQUUsRUFBRTtnQkFDZixPQUFPLENBQUMsS0FBSyxDQUNYLGtFQUFrRSxpQkFBaUIsQ0FBQyxJQUFJLENBQ3RGLElBQUksQ0FDTCxrQ0FBa0MsQ0FDcEMsQ0FBQzthQUNIO1lBQ0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxVQUFVLENBQUM7U0FDN0I7SUFDSCxDQUFDOzs7WUFqQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxxQkFBcUI7Z0JBQy9CLHliQUF5Qzs7YUFFMUM7OztvQkFFRSxLQUFLO3lCQUdMLEtBQUs7d0JBR0wsS0FBSztvQkFHTCxLQUFLOzs7O0lBVE4sMkNBQ1U7O0lBRVYsZ0RBQytCOztJQUUvQiwrQ0FDeUU7O0lBRXpFLDJDQUE2Qzs7SUFFN0MsMkNBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBpc0Rldk1vZGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmd4LXNrZWxldG9uLWxvYWRlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9uZ3gtc2tlbGV0b24tbG9hZGVyLmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9uZ3gtc2tlbGV0b24tbG9hZGVyLnNjc3MnXSxcbn0pXG5leHBvcnQgY2xhc3MgTmd4U2tlbGV0b25Mb2FkZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKVxuICBjb3VudCA9IDE7XG5cbiAgQElucHV0KClcbiAgYXBwZWFyYW5jZTogJ2NpcmNsZScgfCAnJyA9ICcnO1xuXG4gIEBJbnB1dCgpXG4gIGFuaW1hdGlvbjogJ3Byb2dyZXNzJyB8ICdwcm9ncmVzcy1kYXJrJyB8ICdwdWxzZScgfCAnZmFsc2UnID0gJ3Byb2dyZXNzJztcblxuICBASW5wdXQoKSB0aGVtZTogeyBbazogc3RyaW5nXTogc3RyaW5nIH0gPSB7fTtcblxuICBpdGVtczogQXJyYXk8YW55PiA9IFtdO1xuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuaXRlbXMubGVuZ3RoID0gdGhpcy5jb3VudDtcbiAgICBjb25zdCBhbGxvd2VkQW5pbWF0aW9ucyA9IFsncHJvZ3Jlc3MnLCAncHJvZ3Jlc3MtZGFyaycsICdwdWxzZScsICdmYWxzZSddO1xuICAgIGlmICghYWxsb3dlZEFuaW1hdGlvbnMuaW5jbHVkZXModGhpcy5hbmltYXRpb24pKSB7XG4gICAgICAvLyBTaG93cyBlcnJvciBtZXNzYWdlIG9ubHkgaW4gRGV2ZWxvcG1lbnRcbiAgICAgIGlmIChpc0Rldk1vZGUoKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgIGBcXGBOZ3hTa2VsZXRvbkxvYWRlckNvbXBvbmVudFxcYCBuZWVkIHRvIHJlY2VpdmUgJ2FuaW1hdGlvbicgYXM6ICR7YWxsb3dlZEFuaW1hdGlvbnMuam9pbihcbiAgICAgICAgICAgICcsICdcbiAgICAgICAgICApfS4gRm9yY2luZyBkZWZhdWx0IHRvIFwicHJvZ3Jlc3NcIi5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aGlzLmFuaW1hdGlvbiA9ICdwcm9ncmVzcyc7XG4gICAgfVxuICB9XG59XG4iXX0=