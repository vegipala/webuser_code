/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { FormGroup, FormControl } from '@angular/forms';
import { KeysPipe } from '../../pipes/keys.pipe';
import { Config } from '../../models/config';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from '../../directives/number-only.directive';
import * as ɵngcc4 from '../../pipes/keys.pipe';

function NgOtpInputComponent_div_0_input_1_Template(rf, ctx) { if (rf & 1) {
    var _r42 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "input", 3);
    ɵngcc0.ɵɵlistener("keydown", function NgOtpInputComponent_div_0_input_1_Template_input_keydown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r42); var ctx_r41 = ɵngcc0.ɵɵnextContext(2); return ctx_r41.onKeyDown($event); })("keyup", function NgOtpInputComponent_div_0_input_1_Template_input_keyup_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r42); var i_r40 = ctx.index; var ctx_r43 = ɵngcc0.ɵɵnextContext(2); return ctx_r43.onKeyUp($event, i_r40); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var item_r39 = ctx.$implicit;
    var i_r40 = ctx.index;
    var ctx_r38 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassMapInterpolate1("otp-input ", ctx_r38.config.inputClass, "");
    ɵngcc0.ɵɵpropertyInterpolate2("id", "otp_", i_r40, "_", ctx_r38.componentKey, "");
    ɵngcc0.ɵɵproperty("pattern", ctx_r38.config.allowNumbersOnly ? "\\d*" : "")("type", ctx_r38.inputType)("placeholder", (ctx_r38.config == null ? null : ctx_r38.config.placeholder) || "")("disabledNumberOnly", !ctx_r38.config.allowNumbersOnly)("ngStyle", ctx_r38.config.inputStyles)("formControl", ctx_r38.otpForm.controls[item_r39]);
} }
function NgOtpInputComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵtemplate(1, NgOtpInputComponent_div_0_input_1_Template, 1, 11, "input", 2);
    ɵngcc0.ɵɵpipe(2, "keys");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r37 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMapInterpolate1("wrapper ", ctx_r37.config.containerClass, "");
    ɵngcc0.ɵɵpropertyInterpolate1("id", "c_", ctx_r37.componentKey, "");
    ɵngcc0.ɵɵproperty("ngStyle", ctx_r37.config.containerStyles);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(2, 6, ctx_r37.otpForm == null ? null : ctx_r37.otpForm.controls));
} }
var NgOtpInputComponent = /** @class */ (function () {
    function NgOtpInputComponent(keysPipe) {
        this.keysPipe = keysPipe;
        this.config = { length: 4 };
        // tslint:disable-next-line: no-output-on-prefix
        this.onInputChange = new EventEmitter();
        this.inputControls = new Array(this.config.length);
        this.componentKey = Math.random()
            .toString(36)
            .substring(2) + new Date().getTime().toString(36);
    }
    /**
     * @return {?}
     */
    NgOtpInputComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.otpForm = new FormGroup({});
        for (var index = 0; index < this.config.length; index++) {
            this.otpForm.addControl(this.getControlName(index), new FormControl());
        }
        this.inputType = this.getInputType();
    };
    /**
     * @return {?}
     */
    NgOtpInputComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.config.disableAutoFocus) {
            /** @type {?} */
            var containerItem = document.getElementById("c_" + this.componentKey);
            if (containerItem) {
                containerItem.addEventListener('paste', (/**
                 * @param {?} evt
                 * @return {?}
                 */
                function (evt) { return _this.handlePaste(evt); }));
                /** @type {?} */
                var ele = containerItem.getElementsByClassName('otp-input')[0];
                if (ele && ele.focus) {
                    ele.focus();
                }
            }
        }
    };
    /**
     * @private
     * @param {?} idx
     * @return {?}
     */
    NgOtpInputComponent.prototype.getControlName = /**
     * @private
     * @param {?} idx
     * @return {?}
     */
    function (idx) {
        return "ctrl_" + idx;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgOtpInputComponent.prototype.ifLeftArrow = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.ifKeyCode(event, 37);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgOtpInputComponent.prototype.ifRightArrow = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.ifKeyCode(event, 39);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgOtpInputComponent.prototype.ifBackspaceOrDelete = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return (event.key === 'Backspace' ||
            event.key === 'Delete' ||
            this.ifKeyCode(event, 8) ||
            this.ifKeyCode(event, 46));
    };
    /**
     * @param {?} event
     * @param {?} targetCode
     * @return {?}
     */
    NgOtpInputComponent.prototype.ifKeyCode = /**
     * @param {?} event
     * @param {?} targetCode
     * @return {?}
     */
    function (event, targetCode) {
        /** @type {?} */
        var key = event.keyCode || event.charCode;
        // tslint:disable-next-line: triple-equals
        return key == targetCode ? true : false;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    NgOtpInputComponent.prototype.onKeyDown = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var isSpace = this.ifKeyCode($event, 32);
        if (isSpace) { // prevent space
            return false;
        }
    };
    /**
     * @param {?} $event
     * @param {?} inputIdx
     * @return {?}
     */
    NgOtpInputComponent.prototype.onKeyUp = /**
     * @param {?} $event
     * @param {?} inputIdx
     * @return {?}
     */
    function ($event, inputIdx) {
        /** @type {?} */
        var nextInputId = this.appendKey("otp_" + (inputIdx + 1));
        /** @type {?} */
        var prevInputId = this.appendKey("otp_" + (inputIdx - 1));
        if (this.ifRightArrow($event)) {
            this.setSelected(nextInputId);
            return;
        }
        if (this.ifLeftArrow($event)) {
            this.setSelected(prevInputId);
            return;
        }
        /** @type {?} */
        var isBackspace = this.ifBackspaceOrDelete($event);
        if (isBackspace && !$event.target.value) {
            this.setSelected(prevInputId);
            this.rebuildValue();
            return;
        }
        if (!$event.target.value) {
            return;
        }
        if (this.ifValidEntry($event)) {
            this.setSelected(nextInputId);
        }
        this.rebuildValue();
    };
    /**
     * @param {?} id
     * @return {?}
     */
    NgOtpInputComponent.prototype.appendKey = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return id + "_" + this.componentKey;
    };
    /**
     * @param {?} eleId
     * @return {?}
     */
    NgOtpInputComponent.prototype.setSelected = /**
     * @param {?} eleId
     * @return {?}
     */
    function (eleId) {
        this.focusTo(eleId);
        /** @type {?} */
        var ele = document.getElementById(eleId);
        if (ele && ele.setSelectionRange) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                ele.setSelectionRange(0, 1);
            }), 0);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgOtpInputComponent.prototype.ifValidEntry = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var inp = String.fromCharCode(event.keyCode);
        /** @type {?} */
        var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
        return (isMobile ||
            /[a-zA-Z0-9-_]/.test(inp) ||
            (this.config.allowKeyCodes &&
                this.config.allowKeyCodes.includes(event.keyCode)) ||
            (event.keyCode >= 96 && event.keyCode <= 105));
    };
    /**
     * @param {?} eleId
     * @return {?}
     */
    NgOtpInputComponent.prototype.focusTo = /**
     * @param {?} eleId
     * @return {?}
     */
    function (eleId) {
        /** @type {?} */
        var ele = document.getElementById(eleId);
        if (ele) {
            ele.focus();
        }
    };
    // method to set component value
    // method to set component value
    /**
     * @param {?} value
     * @return {?}
     */
    NgOtpInputComponent.prototype.setValue = 
    // method to set component value
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        if (this.config.allowNumbersOnly && isNaN(value)) {
            return;
        }
        this.otpForm.reset();
        if (!value) {
            this.rebuildValue();
            return;
        }
        value = value.toString().replace(/\s/g, ''); // remove whitespace
        Array.from(value).forEach((/**
         * @param {?} c
         * @param {?} idx
         * @return {?}
         */
        function (c, idx) {
            if (_this.otpForm.get(_this.getControlName(idx))) {
                _this.otpForm.get(_this.getControlName(idx)).setValue(c);
            }
        }));
        if (!this.config.disableAutoFocus) {
            /** @type {?} */
            var containerItem = document.getElementById("c_" + this.componentKey);
            /** @type {?} */
            var indexOfElementToFocus = value.length < this.config.length ? value.length : (this.config.length - 1);
            /** @type {?} */
            var ele = containerItem.getElementsByClassName('otp-input')[indexOfElementToFocus];
            if (ele && ele.focus) {
                ele.focus();
            }
        }
        this.rebuildValue();
    };
    /**
     * @return {?}
     */
    NgOtpInputComponent.prototype.rebuildValue = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var val = '';
        this.keysPipe.transform(this.otpForm.controls).forEach((/**
         * @param {?} k
         * @return {?}
         */
        function (k) {
            if (_this.otpForm.controls[k].value) {
                val += _this.otpForm.controls[k].value;
            }
        }));
        this.onInputChange.emit(val);
    };
    /**
     * @return {?}
     */
    NgOtpInputComponent.prototype.getInputType = /**
     * @return {?}
     */
    function () {
        return this.config.isPasswordInput
            ? 'password'
            : this.config.allowNumbersOnly
                ? 'tel'
                : 'text';
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NgOtpInputComponent.prototype.handlePaste = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        // Get pasted data via clipboard API
        /** @type {?} */
        var clipboardData = e.clipboardData || window['clipboardData'];
        if (clipboardData) {
            /** @type {?} */
            var pastedData = clipboardData.getData('Text');
        }
        // Stop data actually being pasted into div
        e.stopPropagation();
        e.preventDefault();
        if (!pastedData) {
            return;
        }
        this.setValue(pastedData);
    };
    /** @nocollapse */
    NgOtpInputComponent.ctorParameters = function () { return [
        { type: KeysPipe }
    ]; };
    NgOtpInputComponent.propDecorators = {
        config: [{ type: Input }],
        onInputChange: [{ type: Output }]
    };
NgOtpInputComponent.ɵfac = function NgOtpInputComponent_Factory(t) { return new (t || NgOtpInputComponent)(ɵngcc0.ɵɵdirectiveInject(KeysPipe)); };
NgOtpInputComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgOtpInputComponent, selectors: [["ng-otp-input"]], inputs: { config: "config" }, outputs: { onInputChange: "onInputChange" }, decls: 1, vars: 1, consts: [[3, "class", "id", "ngStyle", 4, "ngIf"], [3, "id", "ngStyle"], ["numberOnly", "", "maxlength", "1", "autocomplete", "off", 3, "pattern", "type", "placeholder", "disabledNumberOnly", "ngStyle", "class", "formControl", "id", "keydown", "keyup", 4, "ngFor", "ngForOf"], ["numberOnly", "", "maxlength", "1", "autocomplete", "off", 3, "pattern", "type", "placeholder", "disabledNumberOnly", "ngStyle", "formControl", "id", "keydown", "keyup"]], template: function NgOtpInputComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, NgOtpInputComponent_div_0_Template, 3, 8, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.otpForm == null ? null : ctx.otpForm.controls);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgStyle, ɵngcc1.NgForOf, ɵngcc2.DefaultValueAccessor, ɵngcc3.NumberOnlyDirective, ɵngcc2.MaxLengthValidator, ɵngcc2.PatternValidator, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective], pipes: [ɵngcc4.KeysPipe], styles: [".otp-input[_ngcontent-%COMP%]{width:50px;height:50px;border-radius:4px;border:1px solid #c5c5c5;text-align:center;font-size:32px}.wrapper[_ngcontent-%COMP%]   .otp-input[_ngcontent-%COMP%]:not(:last-child){margin-right:8px}@media screen and (max-width:767px){.otp-input[_ngcontent-%COMP%]{width:40px;font-size:24px;height:40px}}@media screen and (max-width:420px){.otp-input[_ngcontent-%COMP%]{width:30px;font-size:18px;height:30px}}"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgOtpInputComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line: component-selector
                selector: 'ng-otp-input',
                template: "<div class=\"wrapper {{config.containerClass}}\" id=\"c_{{componentKey}}\" *ngIf=\"otpForm?.controls\"\r\n  [ngStyle]=\"config.containerStyles\">\r\n  <input [pattern]=\"config.allowNumbersOnly ? '\\\\d*' : ''\" [type]=\"inputType\" numberOnly [placeholder]=\"config?.placeholder || ''\"\r\n    [disabledNumberOnly]=\"!config.allowNumbersOnly\" [ngStyle]=\"config.inputStyles\" maxlength=\"1\"\r\n    class=\"otp-input {{config.inputClass}}\" autocomplete=\"off\" *ngFor=\"let item of otpForm?.controls | keys;let i=index\"\r\n    [formControl]=\"otpForm.controls[item]\" id=\"otp_{{i}}_{{componentKey}}\" (keydown)=\"onKeyDown($event)\"\r\n    (keyup)=\"onKeyUp($event,i)\">\r\n</div>",
                styles: [".otp-input{width:50px;height:50px;border-radius:4px;border:1px solid #c5c5c5;text-align:center;font-size:32px}.wrapper .otp-input:not(:last-child){margin-right:8px}@media screen and (max-width:767px){.otp-input{width:40px;font-size:24px;height:40px}}@media screen and (max-width:420px){.otp-input{width:30px;font-size:18px;height:30px}}"]
            }]
    }], function () { return [{ type: KeysPipe }]; }, { config: [{
            type: Input
        }], onInputChange: [{
            type: Output
        }] }); })();
    return NgOtpInputComponent;
}());
export { NgOtpInputComponent };
if (false) {
    /** @type {?} */
    NgOtpInputComponent.prototype.config;
    /** @type {?} */
    NgOtpInputComponent.prototype.onInputChange;
    /** @type {?} */
    NgOtpInputComponent.prototype.otpForm;
    /** @type {?} */
    NgOtpInputComponent.prototype.inputControls;
    /** @type {?} */
    NgOtpInputComponent.prototype.componentKey;
    /** @type {?} */
    NgOtpInputComponent.prototype.inputType;
    /**
     * @type {?}
     * @private
     */
    NgOtpInputComponent.prototype.keysPipe;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,