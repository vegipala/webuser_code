import { OnInit, EventEmitter, AfterViewInit } from '@angular/core';
import { FormGroup, FormControl } from '@angular/forms';
import { KeysPipe } from '../../pipes/keys.pipe';
import { Config } from '../../models/config';
import * as ɵngcc0 from '@angular/core';
export declare class NgOtpInputComponent implements OnInit, AfterViewInit {
    private keysPipe;
    config: Config;
    onInputChange: EventEmitter<string>;
    otpForm: FormGroup;
    inputControls: FormControl[];
    componentKey: string;
    inputType: string;
    constructor(keysPipe: KeysPipe);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    private getControlName;
    ifLeftArrow(event: any): boolean;
    ifRightArrow(event: any): boolean;
    ifBackspaceOrDelete(event: any): boolean;
    ifKeyCode(event: any, targetCode: any): boolean;
    onKeyDown($event: any): boolean;
    onKeyUp($event: any, inputIdx: any): void;
    appendKey(id: any): string;
    setSelected(eleId: any): void;
    ifValidEntry(event: any): boolean;
    focusTo(eleId: any): void;
    setValue(value: any): void;
    rebuildValue(): void;
    getInputType(): string;
    handlePaste(e: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgOtpInputComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgOtpInputComponent, "ng-otp-input", never, {
    "config": "config";
}, {
    "onInputChange": "onInputChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctb3RwLWlucHV0LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuZy1vdHAtaW5wdXQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMEJBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25Jbml0LCBFdmVudEVtaXR0ZXIsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRm9ybUdyb3VwLCBGb3JtQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgS2V5c1BpcGUgfSBmcm9tICcuLi8uLi9waXBlcy9rZXlzLnBpcGUnO1xyXG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICcuLi8uLi9tb2RlbHMvY29uZmlnJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmdPdHBJbnB1dENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgICBwcml2YXRlIGtleXNQaXBlO1xyXG4gICAgY29uZmlnOiBDb25maWc7XHJcbiAgICBvbklucHV0Q2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcclxuICAgIG90cEZvcm06IEZvcm1Hcm91cDtcclxuICAgIGlucHV0Q29udHJvbHM6IEZvcm1Db250cm9sW107XHJcbiAgICBjb21wb25lbnRLZXk6IHN0cmluZztcclxuICAgIGlucHV0VHlwZTogc3RyaW5nO1xyXG4gICAgY29uc3RydWN0b3Ioa2V5c1BpcGU6IEtleXNQaXBlKTtcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcclxuICAgIHByaXZhdGUgZ2V0Q29udHJvbE5hbWU7XHJcbiAgICBpZkxlZnRBcnJvdyhldmVudDogYW55KTogYm9vbGVhbjtcclxuICAgIGlmUmlnaHRBcnJvdyhldmVudDogYW55KTogYm9vbGVhbjtcclxuICAgIGlmQmFja3NwYWNlT3JEZWxldGUoZXZlbnQ6IGFueSk6IGJvb2xlYW47XHJcbiAgICBpZktleUNvZGUoZXZlbnQ6IGFueSwgdGFyZ2V0Q29kZTogYW55KTogYm9vbGVhbjtcclxuICAgIG9uS2V5RG93bigkZXZlbnQ6IGFueSk6IGJvb2xlYW47XHJcbiAgICBvbktleVVwKCRldmVudDogYW55LCBpbnB1dElkeDogYW55KTogdm9pZDtcclxuICAgIGFwcGVuZEtleShpZDogYW55KTogc3RyaW5nO1xyXG4gICAgc2V0U2VsZWN0ZWQoZWxlSWQ6IGFueSk6IHZvaWQ7XHJcbiAgICBpZlZhbGlkRW50cnkoZXZlbnQ6IGFueSk6IGJvb2xlYW47XHJcbiAgICBmb2N1c1RvKGVsZUlkOiBhbnkpOiB2b2lkO1xyXG4gICAgc2V0VmFsdWUodmFsdWU6IGFueSk6IHZvaWQ7XHJcbiAgICByZWJ1aWxkVmFsdWUoKTogdm9pZDtcclxuICAgIGdldElucHV0VHlwZSgpOiBzdHJpbmc7XHJcbiAgICBoYW5kbGVQYXN0ZShlOiBhbnkpOiB2b2lkO1xyXG59XHJcbiJdfQ==