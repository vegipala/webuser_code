import { __assign, __decorate, __metadata, __param } from "tslib";
import { NgModule, Inject, Optional, SkipSelf } from '@angular/core';
import { NavigationCancel, NavigationEnd, NavigationError, NavigationStart, Router, RouterEvent } from '@angular/router';
import { NgxUiLoaderService } from '../core/ngx-ui-loader.service';
import { NGX_UI_LOADER_ROUTER_CONFIG_TOKEN } from './ngx-ui-loader-router-config.token';
import { ROUTER_LOADER_TASK_ID } from '../utils/constants';
import { getExcludeObj, isIgnored } from '../utils/functions';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
var NgxUiLoaderRouterModule = /** @class */ (function () {
    /**
     * Constructor
     */
    function NgxUiLoaderRouterModule(parentModule, customConfig, router, loader) {
        var _this = this;
        if (parentModule) {
            throw new Error('[ngx-ui-loader] - NgxUiLoaderRouterModule is already loaded. It should be imported in the root `AppModule` only!');
        }
        var config = {
            loaderId: loader.getDefaultConfig().masterLoaderId,
            showForeground: true
        };
        this.exclude = getExcludeObj(customConfig);
        if (customConfig) {
            config = __assign(__assign({}, config), customConfig);
        }
        router.events.subscribe(function (event) {
            if (event instanceof NavigationStart) {
                if (!isIgnored(event.url, _this.exclude.strs, _this.exclude.regExps)) {
                    if (config.showForeground) {
                        loader.startLoader(config.loaderId, ROUTER_LOADER_TASK_ID);
                    }
                    else {
                        loader.startBackgroundLoader(config.loaderId, ROUTER_LOADER_TASK_ID);
                    }
                }
            }
            if (event instanceof NavigationEnd || event instanceof NavigationCancel || event instanceof NavigationError) {
                if (!isIgnored(event.url, _this.exclude.strs, _this.exclude.regExps)) {
                    if (config.showForeground) {
                        loader.stopLoader(config.loaderId, ROUTER_LOADER_TASK_ID);
                    }
                    else {
                        loader.stopBackgroundLoader(config.loaderId, ROUTER_LOADER_TASK_ID);
                    }
                }
            }
        });
    }
    NgxUiLoaderRouterModule_1 = NgxUiLoaderRouterModule;
    /**
     * forRoot
     * @returns A module with its provider dependencies
     */
    NgxUiLoaderRouterModule.forRoot = function (routerConfig) {
        return {
            ngModule: NgxUiLoaderRouterModule_1,
            providers: [
                {
                    provide: NGX_UI_LOADER_ROUTER_CONFIG_TOKEN,
                    useValue: routerConfig
                }
            ]
        };
    };
    var NgxUiLoaderRouterModule_1;
    NgxUiLoaderRouterModule.ctorParameters = function () { return [
        { type: NgxUiLoaderRouterModule, decorators: [{ type: Optional }, { type: SkipSelf }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NGX_UI_LOADER_ROUTER_CONFIG_TOKEN,] }] },
        { type: Router },
        { type: NgxUiLoaderService }
    ]; };
    NgxUiLoaderRouterModule = NgxUiLoaderRouterModule_1 = __decorate([ __param(0, Optional()), __param(0, SkipSelf()),
        __param(1, Optional()), __param(1, Inject(NGX_UI_LOADER_ROUTER_CONFIG_TOKEN)),
        __metadata("design:paramtypes", [NgxUiLoaderRouterModule, Object, Router,
            NgxUiLoaderService])
    ], NgxUiLoaderRouterModule);
NgxUiLoaderRouterModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxUiLoaderRouterModule });
NgxUiLoaderRouterModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxUiLoaderRouterModule_Factory(t) { return new (t || NgxUiLoaderRouterModule)(ɵngcc0.ɵɵinject(NgxUiLoaderRouterModule, 12), ɵngcc0.ɵɵinject(NGX_UI_LOADER_ROUTER_CONFIG_TOKEN, 8), ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(NgxUiLoaderService)); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxUiLoaderRouterModule, [{
        type: NgModule,
        args: [{}]
    }], function () { return [{ type: NgxUiLoaderRouterModule, decorators: [{
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [NGX_UI_LOADER_ROUTER_CONFIG_TOKEN]
            }] }, { type: ɵngcc1.Router }, { type: NgxUiLoaderService }]; }, null); })();
    return NgxUiLoaderRouterModule;
}());
export { NgxUiLoaderRouterModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXVpLWxvYWRlci1yb3V0ZXIubW9kdWxlLmpzIiwic291cmNlcyI6WyJuZzovbmd4LXVpLWxvYWRlci9saWIvcm91dGVyL25neC11aS1sb2FkZXItcm91dGVyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGFBQWEsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV6SCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUVuRSxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUN4RixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxNQUFNLG9CQUFvQixDQUFDOzs7QUFJOUQ7SUFtQkU7O09BRUc7SUFDSCxpQ0FDMEIsWUFBcUMsRUFDTixZQUFxQyxFQUM1RixNQUFjLEVBQ2QsTUFBMEI7UUFKNUIsaUJBMENDO1FBcENDLElBQUksWUFBWSxFQUFFO1lBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsa0hBQWtILENBQUMsQ0FBQztTQUNySTtRQUVELElBQUksTUFBTSxHQUE0QjtZQUNwQyxRQUFRLEVBQUUsTUFBTSxDQUFDLGdCQUFnQixFQUFFLENBQUMsY0FBYztZQUNsRCxjQUFjLEVBQUUsSUFBSTtTQUNyQixDQUFDO1FBRUYsSUFBSSxDQUFDLE9BQU8sR0FBRyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFM0MsSUFBSSxZQUFZLEVBQUU7WUFDaEIsTUFBTSx5QkFBUSxNQUFNLEdBQUssWUFBWSxDQUFFLENBQUM7U0FDekM7UUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFDLEtBQWtCO1lBQ3pDLElBQUksS0FBSyxZQUFZLGVBQWUsRUFBRTtnQkFDcEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQ2xFLElBQUksTUFBTSxDQUFDLGNBQWMsRUFBRTt3QkFDekIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLHFCQUFxQixDQUFDLENBQUM7cUJBQzVEO3lCQUFNO3dCQUNMLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLHFCQUFxQixDQUFDLENBQUM7cUJBQ3RFO2lCQUNGO2FBQ0Y7WUFFRCxJQUFJLEtBQUssWUFBWSxhQUFhLElBQUksS0FBSyxZQUFZLGdCQUFnQixJQUFJLEtBQUssWUFBWSxlQUFlLEVBQUU7Z0JBQzNHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxLQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO29CQUNsRSxJQUFJLE1BQU0sQ0FBQyxjQUFjLEVBQUU7d0JBQ3pCLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO3FCQUMzRDt5QkFBTTt3QkFDTCxNQUFNLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO3FCQUNyRTtpQkFDRjthQUNGO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO2dDQWhFVSx1QkFBdUI7SUFHbEM7OztPQUdHO0lBQ0ksK0JBQU8sR0FBZCxVQUFlLFlBQXFDO1FBQ2xELE9BQU87WUFDTCxRQUFRLEVBQUUseUJBQXVCO1lBQ2pDLFNBQVMsRUFBRTtnQkFDVDtvQkFDRSxPQUFPLEVBQUUsaUNBQWlDO29CQUMxQyxRQUFRLEVBQUUsWUFBWTtpQkFDdkI7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDOzs7Z0JBTXVDLHVCQUF1Qix1QkFBNUQsUUFBUSxZQUFJLFFBQVE7Z0RBQ3BCLFFBQVEsWUFBSSxNQUFNLFNBQUMsaUNBQWlDO2dCQUM3QyxNQUFNO2dCQUNOLGtCQUFrQjs7SUExQmpCLHVCQUF1QiwyQ0FJL0IsU0FMSixRQUFRLENBQUMsRUFBRSxDQUFDLHJCQUNMLENBdUJILFdBQUEsUUFBUSxFQUFFLENBQUEsRUFBRSxXQUFBLFFBQVEsRUFBRSxDQUFBO1FBQ3RCLFdBQUEsUUFBUSxFQUFFLENBQUEsRUFBRSxXQUFBLE1BQU0sQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFBO3lDQURoQix1QkFBdUIsVUFFckQsTUFBTTtZQUNOLGtCQUFrQjtPQTFCakIsdUJBQXVCLENBaUVuQzs7Ozs7Ozs7Ozs7Ozs7O3lGQUNEO0lBREEsOEJBQUM7Q0FBQSxBQWpFRCxJQWlFQztTQWpFWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgSW5qZWN0LCBPcHRpb25hbCwgU2tpcFNlbGYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5hdmlnYXRpb25DYW5jZWwsIE5hdmlnYXRpb25FbmQsIE5hdmlnYXRpb25FcnJvciwgTmF2aWdhdGlvblN0YXJ0LCBSb3V0ZXIsIFJvdXRlckV2ZW50IH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuaW1wb3J0IHsgTmd4VWlMb2FkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vY29yZS9uZ3gtdWktbG9hZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgTmd4VWlMb2FkZXJSb3V0ZXJDb25maWcgfSBmcm9tICcuLi91dGlscy9pbnRlcmZhY2VzJztcbmltcG9ydCB7IE5HWF9VSV9MT0FERVJfUk9VVEVSX0NPTkZJR19UT0tFTiB9IGZyb20gJy4vbmd4LXVpLWxvYWRlci1yb3V0ZXItY29uZmlnLnRva2VuJztcbmltcG9ydCB7IFJPVVRFUl9MT0FERVJfVEFTS19JRCB9IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBnZXRFeGNsdWRlT2JqLCBpc0lnbm9yZWQgfSBmcm9tICcuLi91dGlscy9mdW5jdGlvbnMnO1xuaW1wb3J0IHsgRXhjbHVkZSB9IGZyb20gJy4uL3V0aWxzL2ludGVyZmFjZXMnO1xuXG5ATmdNb2R1bGUoe30pXG5leHBvcnQgY2xhc3MgTmd4VWlMb2FkZXJSb3V0ZXJNb2R1bGUge1xuICBwcml2YXRlIGV4Y2x1ZGU6IEV4Y2x1ZGU7XG5cbiAgLyoqXG4gICAqIGZvclJvb3RcbiAgICogQHJldHVybnMgQSBtb2R1bGUgd2l0aCBpdHMgcHJvdmlkZXIgZGVwZW5kZW5jaWVzXG4gICAqL1xuICBzdGF0aWMgZm9yUm9vdChyb3V0ZXJDb25maWc6IE5neFVpTG9hZGVyUm91dGVyQ29uZmlnKTogTW9kdWxlV2l0aFByb3ZpZGVyczxOZ3hVaUxvYWRlclJvdXRlck1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTmd4VWlMb2FkZXJSb3V0ZXJNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IE5HWF9VSV9MT0FERVJfUk9VVEVSX0NPTkZJR19UT0tFTixcbiAgICAgICAgICB1c2VWYWx1ZTogcm91dGVyQ29uZmlnXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBAT3B0aW9uYWwoKSBAU2tpcFNlbGYoKSBwYXJlbnRNb2R1bGU6IE5neFVpTG9hZGVyUm91dGVyTW9kdWxlLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoTkdYX1VJX0xPQURFUl9ST1VURVJfQ09ORklHX1RPS0VOKSBjdXN0b21Db25maWc6IE5neFVpTG9hZGVyUm91dGVyQ29uZmlnLFxuICAgIHJvdXRlcjogUm91dGVyLFxuICAgIGxvYWRlcjogTmd4VWlMb2FkZXJTZXJ2aWNlXG4gICkge1xuICAgIGlmIChwYXJlbnRNb2R1bGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW25neC11aS1sb2FkZXJdIC0gTmd4VWlMb2FkZXJSb3V0ZXJNb2R1bGUgaXMgYWxyZWFkeSBsb2FkZWQuIEl0IHNob3VsZCBiZSBpbXBvcnRlZCBpbiB0aGUgcm9vdCBgQXBwTW9kdWxlYCBvbmx5IScpO1xuICAgIH1cblxuICAgIGxldCBjb25maWc6IE5neFVpTG9hZGVyUm91dGVyQ29uZmlnID0ge1xuICAgICAgbG9hZGVySWQ6IGxvYWRlci5nZXREZWZhdWx0Q29uZmlnKCkubWFzdGVyTG9hZGVySWQsXG4gICAgICBzaG93Rm9yZWdyb3VuZDogdHJ1ZVxuICAgIH07XG5cbiAgICB0aGlzLmV4Y2x1ZGUgPSBnZXRFeGNsdWRlT2JqKGN1c3RvbUNvbmZpZyk7XG5cbiAgICBpZiAoY3VzdG9tQ29uZmlnKSB7XG4gICAgICBjb25maWcgPSB7IC4uLmNvbmZpZywgLi4uY3VzdG9tQ29uZmlnIH07XG4gICAgfVxuXG4gICAgcm91dGVyLmV2ZW50cy5zdWJzY3JpYmUoKGV2ZW50OiBSb3V0ZXJFdmVudCkgPT4ge1xuICAgICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvblN0YXJ0KSB7XG4gICAgICAgIGlmICghaXNJZ25vcmVkKGV2ZW50LnVybCwgdGhpcy5leGNsdWRlLnN0cnMsIHRoaXMuZXhjbHVkZS5yZWdFeHBzKSkge1xuICAgICAgICAgIGlmIChjb25maWcuc2hvd0ZvcmVncm91bmQpIHtcbiAgICAgICAgICAgIGxvYWRlci5zdGFydExvYWRlcihjb25maWcubG9hZGVySWQsIFJPVVRFUl9MT0FERVJfVEFTS19JRCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxvYWRlci5zdGFydEJhY2tncm91bmRMb2FkZXIoY29uZmlnLmxvYWRlcklkLCBST1VURVJfTE9BREVSX1RBU0tfSUQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRW5kIHx8IGV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvbkNhbmNlbCB8fCBldmVudCBpbnN0YW5jZW9mIE5hdmlnYXRpb25FcnJvcikge1xuICAgICAgICBpZiAoIWlzSWdub3JlZChldmVudC51cmwsIHRoaXMuZXhjbHVkZS5zdHJzLCB0aGlzLmV4Y2x1ZGUucmVnRXhwcykpIHtcbiAgICAgICAgICBpZiAoY29uZmlnLnNob3dGb3JlZ3JvdW5kKSB7XG4gICAgICAgICAgICBsb2FkZXIuc3RvcExvYWRlcihjb25maWcubG9hZGVySWQsIFJPVVRFUl9MT0FERVJfVEFTS19JRCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxvYWRlci5zdG9wQmFja2dyb3VuZExvYWRlcihjb25maWcubG9hZGVySWQsIFJPVVRFUl9MT0FERVJfVEFTS19JRCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==