import { __assign, __decorate, __metadata, __param } from "tslib";
import { Injectable, Inject, Optional } from '@angular/core';
import { finalize } from 'rxjs/operators';
import { NgxUiLoaderService } from '../core/ngx-ui-loader.service';
import { NGX_UI_LOADER_HTTP_CONFIG_TOKEN } from './ngx-ui-loader-http-config.token';
import { HTTP_LOADER_TASK_ID } from '../utils/constants';
import { getExcludeObj, isIgnored } from '../utils/functions';
import * as ɵngcc0 from '@angular/core';
var NgxUiLoaderHttpInterceptor = /** @class */ (function () {
    /**
     * Constructor
     */
    function NgxUiLoaderHttpInterceptor(customConfig, loader) {
        this.loader = loader;
        this.count = 0;
        this.config = {
            loaderId: this.loader.getDefaultConfig().masterLoaderId,
            showForeground: false
        };
        this.exclude = getExcludeObj(customConfig);
        if (customConfig) {
            this.config = __assign(__assign({}, this.config), customConfig);
        }
    }
    NgxUiLoaderHttpInterceptor.prototype.intercept = function (req, next) {
        var _this = this;
        if (isIgnored(req.url, this.exclude.strs, this.exclude.regExps)) {
            return next.handle(req);
        }
        this.count++;
        if (this.config.showForeground) {
            this.loader.startLoader(this.config.loaderId, HTTP_LOADER_TASK_ID, this.config);
        }
        else {
            this.loader.startBackgroundLoader(this.config.loaderId, HTTP_LOADER_TASK_ID, this.config);
        }
        return next.handle(req).pipe(finalize(function () {
            _this.count--;
            if (_this.count === 0) {
                if (_this.config.showForeground) {
                    _this.loader.stopLoader(_this.config.loaderId, HTTP_LOADER_TASK_ID);
                }
                else {
                    _this.loader.stopBackgroundLoader(_this.config.loaderId, HTTP_LOADER_TASK_ID);
                }
            }
        }));
    };
    NgxUiLoaderHttpInterceptor.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NGX_UI_LOADER_HTTP_CONFIG_TOKEN,] }] },
        { type: NgxUiLoaderService }
    ]; };
    NgxUiLoaderHttpInterceptor = __decorate([ __param(0, Optional()), __param(0, Inject(NGX_UI_LOADER_HTTP_CONFIG_TOKEN)),
        __metadata("design:paramtypes", [Object, NgxUiLoaderService])
    ], NgxUiLoaderHttpInterceptor);
NgxUiLoaderHttpInterceptor.ɵfac = function NgxUiLoaderHttpInterceptor_Factory(t) { return new (t || NgxUiLoaderHttpInterceptor)(ɵngcc0.ɵɵinject(NGX_UI_LOADER_HTTP_CONFIG_TOKEN, 8), ɵngcc0.ɵɵinject(NgxUiLoaderService)); };
NgxUiLoaderHttpInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgxUiLoaderHttpInterceptor, factory: function (t) { return NgxUiLoaderHttpInterceptor.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxUiLoaderHttpInterceptor, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [NGX_UI_LOADER_HTTP_CONFIG_TOKEN]
            }] }, { type: NgxUiLoaderService }]; }, null); })();
    return NgxUiLoaderHttpInterceptor;
}());
export { NgxUiLoaderHttpInterceptor };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXVpLWxvYWRlci1odHRwLmludGVyY2VwdG9yLmpzIiwic291cmNlcyI6WyJuZzovbmd4LXVpLWxvYWRlci9saWIvaHR0cC9uZ3gtdWktbG9hZGVyLWh0dHAuaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUc3RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFMUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDbkUsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFFcEYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDekQsT0FBTyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7QUFJOUQ7SUFLRTs7T0FFRztJQUNILG9DQUN1RCxZQUFtQyxFQUNoRixNQUEwQjtRQUExQixXQUFNLEdBQU4sTUFBTSxDQUFvQjtRQUVsQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNmLElBQUksQ0FBQyxNQUFNLEdBQUc7WUFDWixRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLGNBQWM7WUFDdkQsY0FBYyxFQUFFLEtBQUs7U0FDdEIsQ0FBQztRQUVGLElBQUksQ0FBQyxPQUFPLEdBQUcsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRTNDLElBQUksWUFBWSxFQUFFO1lBQ2hCLElBQUksQ0FBQyxNQUFNLHlCQUFRLElBQUksQ0FBQyxNQUFNLEdBQUssWUFBWSxDQUFFLENBQUM7U0FDbkQ7SUFDSCxDQUFDO0lBRUQsOENBQVMsR0FBVCxVQUFVLEdBQXFCLEVBQUUsSUFBaUI7UUFBbEQsaUJBd0JDO1FBdkJDLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUMvRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDekI7UUFFRCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDYixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFO1lBQzlCLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLG1CQUFtQixFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNqRjthQUFNO1lBQ0wsSUFBSSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxtQkFBbUIsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDM0Y7UUFFRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUMxQixRQUFRLENBQUM7WUFDUCxLQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDYixJQUFJLEtBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQyxFQUFFO2dCQUNwQixJQUFJLEtBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFO29CQUM5QixLQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO2lCQUNuRTtxQkFBTTtvQkFDTCxLQUFJLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLEtBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLG1CQUFtQixDQUFDLENBQUM7aUJBQzdFO2FBQ0Y7UUFDSCxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7Z0RBeENFLFFBQVEsWUFBSSxNQUFNLFNBQUMsK0JBQStCO2dCQUNuQyxrQkFBa0I7O0lBVnpCLDBCQUEwQixlQUFlLFNBRHJELFVBQVUsRUFBRSxyQkFDTCxDQVNILFdBQUEsUUFBUSxFQUFFLENBQUEsRUFBRSxXQUFBLE1BQU0sQ0FBQywrQkFBK0IsQ0FBQyxDQUFBO2lEQUNwQyxrQkFBa0I7T0FWekIsMEJBQTBCLENBa0R0Qzs7Ozs7Ozs7OztnRUFDRDtJQURBLGlDQUFDO0NBQUEsQUFsREQsSUFrREM7U0FsRFksMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0LCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cEludGVyY2VwdG9yLCBIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwUmVxdWVzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbmFsaXplIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBOZ3hVaUxvYWRlclNlcnZpY2UgfSBmcm9tICcuLi9jb3JlL25neC11aS1sb2FkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBOR1hfVUlfTE9BREVSX0hUVFBfQ09ORklHX1RPS0VOIH0gZnJvbSAnLi9uZ3gtdWktbG9hZGVyLWh0dHAtY29uZmlnLnRva2VuJztcbmltcG9ydCB7IE5neFVpTG9hZGVySHR0cENvbmZpZyB9IGZyb20gJy4uL3V0aWxzL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgSFRUUF9MT0FERVJfVEFTS19JRCB9IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBnZXRFeGNsdWRlT2JqLCBpc0lnbm9yZWQgfSBmcm9tICcuLi91dGlscy9mdW5jdGlvbnMnO1xuaW1wb3J0IHsgRXhjbHVkZSB9IGZyb20gJy4uL3V0aWxzL2ludGVyZmFjZXMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmd4VWlMb2FkZXJIdHRwSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuICBwcml2YXRlIGNvdW50OiBudW1iZXI7XG4gIHByaXZhdGUgY29uZmlnOiBOZ3hVaUxvYWRlckh0dHBDb25maWc7XG4gIHByaXZhdGUgZXhjbHVkZTogRXhjbHVkZTtcblxuICAvKipcbiAgICogQ29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoTkdYX1VJX0xPQURFUl9IVFRQX0NPTkZJR19UT0tFTikgY3VzdG9tQ29uZmlnOiBOZ3hVaUxvYWRlckh0dHBDb25maWcsXG4gICAgcHJpdmF0ZSBsb2FkZXI6IE5neFVpTG9hZGVyU2VydmljZVxuICApIHtcbiAgICB0aGlzLmNvdW50ID0gMDtcbiAgICB0aGlzLmNvbmZpZyA9IHtcbiAgICAgIGxvYWRlcklkOiB0aGlzLmxvYWRlci5nZXREZWZhdWx0Q29uZmlnKCkubWFzdGVyTG9hZGVySWQsXG4gICAgICBzaG93Rm9yZWdyb3VuZDogZmFsc2VcbiAgICB9O1xuXG4gICAgdGhpcy5leGNsdWRlID0gZ2V0RXhjbHVkZU9iaihjdXN0b21Db25maWcpO1xuXG4gICAgaWYgKGN1c3RvbUNvbmZpZykge1xuICAgICAgdGhpcy5jb25maWcgPSB7IC4uLnRoaXMuY29uZmlnLCAuLi5jdXN0b21Db25maWcgfTtcbiAgICB9XG4gIH1cblxuICBpbnRlcmNlcHQocmVxOiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICBpZiAoaXNJZ25vcmVkKHJlcS51cmwsIHRoaXMuZXhjbHVkZS5zdHJzLCB0aGlzLmV4Y2x1ZGUucmVnRXhwcykpIHtcbiAgICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpO1xuICAgIH1cblxuICAgIHRoaXMuY291bnQrKztcbiAgICBpZiAodGhpcy5jb25maWcuc2hvd0ZvcmVncm91bmQpIHtcbiAgICAgIHRoaXMubG9hZGVyLnN0YXJ0TG9hZGVyKHRoaXMuY29uZmlnLmxvYWRlcklkLCBIVFRQX0xPQURFUl9UQVNLX0lELCB0aGlzLmNvbmZpZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubG9hZGVyLnN0YXJ0QmFja2dyb3VuZExvYWRlcih0aGlzLmNvbmZpZy5sb2FkZXJJZCwgSFRUUF9MT0FERVJfVEFTS19JRCwgdGhpcy5jb25maWcpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpLnBpcGUoXG4gICAgICBmaW5hbGl6ZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuY291bnQtLTtcbiAgICAgICAgaWYgKHRoaXMuY291bnQgPT09IDApIHtcbiAgICAgICAgICBpZiAodGhpcy5jb25maWcuc2hvd0ZvcmVncm91bmQpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZGVyLnN0b3BMb2FkZXIodGhpcy5jb25maWcubG9hZGVySWQsIEhUVFBfTE9BREVSX1RBU0tfSUQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRlci5zdG9wQmFja2dyb3VuZExvYWRlcih0aGlzLmNvbmZpZy5sb2FkZXJJZCwgSFRUUF9MT0FERVJfVEFTS19JRCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbiJdfQ==