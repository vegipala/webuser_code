import { OnInit, OnChanges, SimpleChanges, OnDestroy, ChangeDetectorRef, TemplateRef } from '@angular/core';
import { DomSanitizer, SafeResourceUrl, SafeStyle } from '@angular/platform-browser';
import { NgxUiLoaderService } from './ngx-ui-loader.service';
import { Subscription } from 'rxjs';
import { NgxUiLoaderConfig } from '../utils/interfaces';
import { DirectionType, PositionType, SpinnerType } from '../utils/types';
import * as ɵngcc0 from '@angular/core';
export declare class NgxUiLoaderComponent implements OnChanges, OnDestroy, OnInit {
    private domSanitizer;
    private changeDetectorRef;
    private ngxService;
    bgsColor: string;
    bgsOpacity: number;
    bgsPosition: PositionType;
    bgsSize: number;
    bgsTemplate: TemplateRef<any>;
    bgsType: SpinnerType;
    fgsColor: string;
    fgsPosition: PositionType;
    fgsSize: number;
    fgsTemplate: TemplateRef<any>;
    fgsType: SpinnerType;
    gap: number;
    loaderId: string;
    logoPosition: PositionType;
    logoSize: number;
    logoUrl: string;
    overlayBorderRadius: string;
    overlayColor: string;
    pbColor: string;
    pbDirection: DirectionType;
    pbThickness: number;
    hasProgressBar: boolean;
    text: string;
    textColor: string;
    textPosition: PositionType;
    fastFadeOut: boolean;
    fgDivs: number[];
    fgSpinnerClass: string;
    bgDivs: number[];
    bgSpinnerClass: string;
    showForeground: boolean;
    showBackground: boolean;
    foregroundClosing: boolean;
    backgroundClosing: boolean;
    trustedLogoUrl: SafeResourceUrl;
    logoTop: SafeStyle;
    spinnerTop: SafeStyle;
    textTop: SafeStyle;
    showForegroundWatcher: Subscription;
    showBackgroundWatcher: Subscription;
    foregroundClosingWatcher: Subscription;
    backgroundClosingWatcher: Subscription;
    defaultConfig: NgxUiLoaderConfig;
    initialized: boolean;
    /**
     * Constructor
     */
    constructor(domSanitizer: DomSanitizer, changeDetectorRef: ChangeDetectorRef, ngxService: NgxUiLoaderService);
    /**
     * On init event
     */
    ngOnInit(): void;
    /**
     * On changes event
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Initialize spinners
     */
    private initializeSpinners;
    /**
     * Determine the positions of spinner, logo and text
     */
    private determinePositions;
    /**
     * On destroy event
     */
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxUiLoaderComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxUiLoaderComponent, "ngx-ui-loader", never, {
    "bgsColor": "bgsColor";
    "bgsOpacity": "bgsOpacity";
    "bgsPosition": "bgsPosition";
    "bgsSize": "bgsSize";
    "bgsType": "bgsType";
    "fgsColor": "fgsColor";
    "fgsPosition": "fgsPosition";
    "fgsSize": "fgsSize";
    "fgsType": "fgsType";
    "gap": "gap";
    "loaderId": "loaderId";
    "logoPosition": "logoPosition";
    "logoSize": "logoSize";
    "logoUrl": "logoUrl";
    "overlayBorderRadius": "overlayBorderRadius";
    "overlayColor": "overlayColor";
    "pbColor": "pbColor";
    "pbDirection": "pbDirection";
    "pbThickness": "pbThickness";
    "hasProgressBar": "hasProgressBar";
    "text": "text";
    "textColor": "textColor";
    "textPosition": "textPosition";
    "bgsTemplate": "bgsTemplate";
    "fgsTemplate": "fgsTemplate";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXVpLWxvYWRlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibmd4LXVpLWxvYWRlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQU1BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0VBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25Jbml0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIE9uRGVzdHJveSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVSZXNvdXJjZVVybCwgU2FmZVN0eWxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBOZ3hVaUxvYWRlclNlcnZpY2UgfSBmcm9tICcuL25neC11aS1sb2FkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE5neFVpTG9hZGVyQ29uZmlnIH0gZnJvbSAnLi4vdXRpbHMvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBEaXJlY3Rpb25UeXBlLCBQb3NpdGlvblR5cGUsIFNwaW5uZXJUeXBlIH0gZnJvbSAnLi4vdXRpbHMvdHlwZXMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmd4VWlMb2FkZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0IHtcbiAgICBwcml2YXRlIGRvbVNhbml0aXplcjtcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yUmVmO1xuICAgIHByaXZhdGUgbmd4U2VydmljZTtcbiAgICBiZ3NDb2xvcjogc3RyaW5nO1xuICAgIGJnc09wYWNpdHk6IG51bWJlcjtcbiAgICBiZ3NQb3NpdGlvbjogUG9zaXRpb25UeXBlO1xuICAgIGJnc1NpemU6IG51bWJlcjtcbiAgICBiZ3NUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBiZ3NUeXBlOiBTcGlubmVyVHlwZTtcbiAgICBmZ3NDb2xvcjogc3RyaW5nO1xuICAgIGZnc1Bvc2l0aW9uOiBQb3NpdGlvblR5cGU7XG4gICAgZmdzU2l6ZTogbnVtYmVyO1xuICAgIGZnc1RlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGZnc1R5cGU6IFNwaW5uZXJUeXBlO1xuICAgIGdhcDogbnVtYmVyO1xuICAgIGxvYWRlcklkOiBzdHJpbmc7XG4gICAgbG9nb1Bvc2l0aW9uOiBQb3NpdGlvblR5cGU7XG4gICAgbG9nb1NpemU6IG51bWJlcjtcbiAgICBsb2dvVXJsOiBzdHJpbmc7XG4gICAgb3ZlcmxheUJvcmRlclJhZGl1czogc3RyaW5nO1xuICAgIG92ZXJsYXlDb2xvcjogc3RyaW5nO1xuICAgIHBiQ29sb3I6IHN0cmluZztcbiAgICBwYkRpcmVjdGlvbjogRGlyZWN0aW9uVHlwZTtcbiAgICBwYlRoaWNrbmVzczogbnVtYmVyO1xuICAgIGhhc1Byb2dyZXNzQmFyOiBib29sZWFuO1xuICAgIHRleHQ6IHN0cmluZztcbiAgICB0ZXh0Q29sb3I6IHN0cmluZztcbiAgICB0ZXh0UG9zaXRpb246IFBvc2l0aW9uVHlwZTtcbiAgICBmYXN0RmFkZU91dDogYm9vbGVhbjtcbiAgICBmZ0RpdnM6IG51bWJlcltdO1xuICAgIGZnU3Bpbm5lckNsYXNzOiBzdHJpbmc7XG4gICAgYmdEaXZzOiBudW1iZXJbXTtcbiAgICBiZ1NwaW5uZXJDbGFzczogc3RyaW5nO1xuICAgIHNob3dGb3JlZ3JvdW5kOiBib29sZWFuO1xuICAgIHNob3dCYWNrZ3JvdW5kOiBib29sZWFuO1xuICAgIGZvcmVncm91bmRDbG9zaW5nOiBib29sZWFuO1xuICAgIGJhY2tncm91bmRDbG9zaW5nOiBib29sZWFuO1xuICAgIHRydXN0ZWRMb2dvVXJsOiBTYWZlUmVzb3VyY2VVcmw7XG4gICAgbG9nb1RvcDogU2FmZVN0eWxlO1xuICAgIHNwaW5uZXJUb3A6IFNhZmVTdHlsZTtcbiAgICB0ZXh0VG9wOiBTYWZlU3R5bGU7XG4gICAgc2hvd0ZvcmVncm91bmRXYXRjaGVyOiBTdWJzY3JpcHRpb247XG4gICAgc2hvd0JhY2tncm91bmRXYXRjaGVyOiBTdWJzY3JpcHRpb247XG4gICAgZm9yZWdyb3VuZENsb3NpbmdXYXRjaGVyOiBTdWJzY3JpcHRpb247XG4gICAgYmFja2dyb3VuZENsb3NpbmdXYXRjaGVyOiBTdWJzY3JpcHRpb247XG4gICAgZGVmYXVsdENvbmZpZzogTmd4VWlMb2FkZXJDb25maWc7XG4gICAgaW5pdGlhbGl6ZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihkb21TYW5pdGl6ZXI6IERvbVNhbml0aXplciwgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLCBuZ3hTZXJ2aWNlOiBOZ3hVaUxvYWRlclNlcnZpY2UpO1xuICAgIC8qKlxuICAgICAqIE9uIGluaXQgZXZlbnRcbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE9uIGNoYW5nZXMgZXZlbnRcbiAgICAgKi9cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIHNwaW5uZXJzXG4gICAgICovXG4gICAgcHJpdmF0ZSBpbml0aWFsaXplU3Bpbm5lcnM7XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbnMgb2Ygc3Bpbm5lciwgbG9nbyBhbmQgdGV4dFxuICAgICAqL1xuICAgIHByaXZhdGUgZGV0ZXJtaW5lUG9zaXRpb25zO1xuICAgIC8qKlxuICAgICAqIE9uIGRlc3Ryb3kgZXZlbnRcbiAgICAgKi9cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19