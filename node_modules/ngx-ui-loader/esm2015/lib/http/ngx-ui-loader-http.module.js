import * as ɵngcc0 from '@angular/core';
var NgxUiLoaderHttpModule_1;
import { __decorate, __metadata, __param } from "tslib";
import { NgModule, Optional, SkipSelf } from '@angular/core';
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { NgxUiLoaderHttpInterceptor } from './ngx-ui-loader-http.interceptor';
import { NGX_UI_LOADER_HTTP_CONFIG_TOKEN } from './ngx-ui-loader-http-config.token';
let NgxUiLoaderHttpModule = NgxUiLoaderHttpModule_1 = class NgxUiLoaderHttpModule {
    /**
     * Constructor
     */
    constructor(parentModule) {
        if (parentModule) {
            throw new Error('[ngx-ui-loader] - NgxUiLoaderHttpModule is already loaded. It should be imported in the root `AppModule` only!');
        }
    }
    /**
     * forRoot
     * @returns A module with its provider dependencies
     */
    static forRoot(httpConfig) {
        return {
            ngModule: NgxUiLoaderHttpModule_1,
            providers: [
                {
                    provide: NGX_UI_LOADER_HTTP_CONFIG_TOKEN,
                    useValue: httpConfig
                }
            ]
        };
    }
};
NgxUiLoaderHttpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxUiLoaderHttpModule });
NgxUiLoaderHttpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxUiLoaderHttpModule_Factory(t) { return new (t || NgxUiLoaderHttpModule)(ɵngcc0.ɵɵinject(NgxUiLoaderHttpModule, 12)); }, providers: [
        {
            provide: HTTP_INTERCEPTORS,
            useClass: NgxUiLoaderHttpInterceptor,
            multi: true
        }
    ] });
NgxUiLoaderHttpModule.ctorParameters = () => [
    { type: NgxUiLoaderHttpModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
NgxUiLoaderHttpModule = NgxUiLoaderHttpModule_1 = __decorate([ __param(0, Optional()), __param(0, SkipSelf()),
    __metadata("design:paramtypes", [NgxUiLoaderHttpModule])
], NgxUiLoaderHttpModule);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxUiLoaderHttpModule, [{
        type: NgModule,
        args: [{
                providers: [
                    {
                        provide: HTTP_INTERCEPTORS,
                        useClass: NgxUiLoaderHttpInterceptor,
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: NgxUiLoaderHttpModule, decorators: [{
                type: Optional
            }, {
                type: SkipSelf
            }] }]; }, null); })();
export { NgxUiLoaderHttpModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXVpLWxvYWRlci1odHRwLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsibmc6L25neC11aS1sb2FkZXIvbGliL2h0dHAvbmd4LXVpLWxvYWRlci1odHRwLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXpELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRTlFLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBV3BGLElBQWEscUJBQXFCLDZCQUFsQyxNQUFhLHFCQUFxQjtJQUNoQzs7T0FFRztJQUNILFlBQW9DLFlBQW1DO1FBQ3JFLElBQUksWUFBWSxFQUFFO1lBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0hBQWdILENBQUMsQ0FBQztTQUNuSTtJQUNILENBQUM7SUFFRDs7O09BR0c7SUFDSCxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQWlDO1FBQzlDLE9BQU87WUFDTCxRQUFRLEVBQUUsdUJBQXFCO1lBQy9CLFNBQVMsRUFBRTtnQkFDVDtvQkFDRSxPQUFPLEVBQUUsK0JBQStCO29CQUN4QyxRQUFRLEVBQUUsVUFBVTtpQkFDckI7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDO0NBQ0Y7Ozs7Ozs7O1NBQUE7O1lBckJtRCxxQkFBcUIsdUJBQTFELFFBQVEsWUFBSSxRQUFROztBQUp0QixxQkFBcUIseUNBSXpCLEtBYlIsUUFBUSxDQUFDLFVBQ1IsU0FBUyxFQUFFLG5DQVFULENBSVcsV0FBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLFdBQUEsUUFBUSxFQUFFLENBQUE7QUFYakMsa0JBQ0UsT0FBTyxFQUFFLGlCQUFpQixQQVVvQixxQkFBcUI7Q0FUbkUsUUFBUSxFQUFFLFJBS0gscUJBQXFCLENBeUJqQztVQTlCeUMsa0JBQ3BDLEtBQUssRUFBRSxJQUFJLGNBQ1osVUFDRixNQUNGLENBQUM7Ozs7Ozs7Ozs7Ozs7OztrQ0EyQkY7U0ExQmEscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIE9wdGlvbmFsLCBTa2lwU2VsZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSFRUUF9JTlRFUkNFUFRPUlMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbmltcG9ydCB7IE5neFVpTG9hZGVySHR0cEludGVyY2VwdG9yIH0gZnJvbSAnLi9uZ3gtdWktbG9hZGVyLWh0dHAuaW50ZXJjZXB0b3InO1xuaW1wb3J0IHsgTmd4VWlMb2FkZXJIdHRwQ29uZmlnIH0gZnJvbSAnLi4vdXRpbHMvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBOR1hfVUlfTE9BREVSX0hUVFBfQ09ORklHX1RPS0VOIH0gZnJvbSAnLi9uZ3gtdWktbG9hZGVyLWh0dHAtY29uZmlnLnRva2VuJztcblxuQE5nTW9kdWxlKHtcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsXG4gICAgICB1c2VDbGFzczogTmd4VWlMb2FkZXJIdHRwSW50ZXJjZXB0b3IsXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOZ3hVaUxvYWRlckh0dHBNb2R1bGUge1xuICAvKipcbiAgICogQ29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIHBhcmVudE1vZHVsZTogTmd4VWlMb2FkZXJIdHRwTW9kdWxlKSB7XG4gICAgaWYgKHBhcmVudE1vZHVsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbbmd4LXVpLWxvYWRlcl0gLSBOZ3hVaUxvYWRlckh0dHBNb2R1bGUgaXMgYWxyZWFkeSBsb2FkZWQuIEl0IHNob3VsZCBiZSBpbXBvcnRlZCBpbiB0aGUgcm9vdCBgQXBwTW9kdWxlYCBvbmx5IScpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBmb3JSb290XG4gICAqIEByZXR1cm5zIEEgbW9kdWxlIHdpdGggaXRzIHByb3ZpZGVyIGRlcGVuZGVuY2llc1xuICAgKi9cbiAgc3RhdGljIGZvclJvb3QoaHR0cENvbmZpZzogTmd4VWlMb2FkZXJIdHRwQ29uZmlnKTogTW9kdWxlV2l0aFByb3ZpZGVyczxOZ3hVaUxvYWRlckh0dHBNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE5neFVpTG9hZGVySHR0cE1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogTkdYX1VJX0xPQURFUl9IVFRQX0NPTkZJR19UT0tFTixcbiAgICAgICAgICB1c2VWYWx1ZTogaHR0cENvbmZpZ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl19