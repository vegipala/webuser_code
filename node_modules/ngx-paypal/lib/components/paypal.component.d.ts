import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { IPayPalConfig } from '../models/paypal-models';
import { PayPalScriptService } from '../services/paypal-script.service';
import * as ɵngcc0 from '@angular/core';
export declare class NgxPaypalComponent implements OnChanges, OnDestroy, AfterViewInit {
    private paypalScriptService;
    private cdr;
    private ngZone;
    /**
     * Configuration for paypal.
     */
    config?: IPayPalConfig;
    /**
     * If enabled, paypal SDK script will be loaded. Useful if you want to have multiple PayPal components on the same page
     * sharing base configuration. In such a case only a single component may register script.
     */
    registerScript: boolean;
    /**
     * Emitted when paypal script is loaded
     */
    scriptLoaded: EventEmitter<any>;
    /**
     * Id of the element where PayPal button will be rendered
     */
    payPalButtonContainerId?: string;
    private readonly ngUnsubscribe;
    private payPalButtonContainerElem?;
    set payPalButtonContainer(content: ElementRef);
    /**
     * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)
     */
    private initializePayPal;
    /**
     * Reference to PayPal global API
     */
    private payPal;
    constructor(paypalScriptService: PayPalScriptService, cdr: ChangeDetectorRef, ngZone: NgZone);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    customInit(payPal: any): void;
    reinitialize(config: IPayPalConfig | undefined): void;
    private doPayPalCheck;
    private initPayPalScript;
    private generateElementId;
    private initPayPal;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxPaypalComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxPaypalComponent, "ngx-paypal", never, {
    "registerScript": "registerScript";
    "config": "config";
}, {
    "scriptLoaded": "scriptLoaded";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5cGFsLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwYXlwYWwuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSVBheVBhbENvbmZpZyB9IGZyb20gJy4uL21vZGVscy9wYXlwYWwtbW9kZWxzJztcclxuaW1wb3J0IHsgUGF5UGFsU2NyaXB0U2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3BheXBhbC1zY3JpcHQuc2VydmljZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5neFBheXBhbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IHtcclxuICAgIHByaXZhdGUgcGF5cGFsU2NyaXB0U2VydmljZTtcclxuICAgIHByaXZhdGUgY2RyO1xyXG4gICAgcHJpdmF0ZSBuZ1pvbmU7XHJcbiAgICAvKipcclxuICAgICAqIENvbmZpZ3VyYXRpb24gZm9yIHBheXBhbC5cclxuICAgICAqL1xyXG4gICAgY29uZmlnPzogSVBheVBhbENvbmZpZztcclxuICAgIC8qKlxyXG4gICAgICogSWYgZW5hYmxlZCwgcGF5cGFsIFNESyBzY3JpcHQgd2lsbCBiZSBsb2FkZWQuIFVzZWZ1bCBpZiB5b3Ugd2FudCB0byBoYXZlIG11bHRpcGxlIFBheVBhbCBjb21wb25lbnRzIG9uIHRoZSBzYW1lIHBhZ2VcclxuICAgICAqIHNoYXJpbmcgYmFzZSBjb25maWd1cmF0aW9uLiBJbiBzdWNoIGEgY2FzZSBvbmx5IGEgc2luZ2xlIGNvbXBvbmVudCBtYXkgcmVnaXN0ZXIgc2NyaXB0LlxyXG4gICAgICovXHJcbiAgICByZWdpc3RlclNjcmlwdDogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogRW1pdHRlZCB3aGVuIHBheXBhbCBzY3JpcHQgaXMgbG9hZGVkXHJcbiAgICAgKi9cclxuICAgIHNjcmlwdExvYWRlZDogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICAvKipcclxuICAgICAqIElkIG9mIHRoZSBlbGVtZW50IHdoZXJlIFBheVBhbCBidXR0b24gd2lsbCBiZSByZW5kZXJlZFxyXG4gICAgICovXHJcbiAgICBwYXlQYWxCdXR0b25Db250YWluZXJJZD86IHN0cmluZztcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgbmdVbnN1YnNjcmliZTtcclxuICAgIHByaXZhdGUgcGF5UGFsQnV0dG9uQ29udGFpbmVyRWxlbT87XHJcbiAgICBzZXQgcGF5UGFsQnV0dG9uQ29udGFpbmVyKGNvbnRlbnQ6IEVsZW1lbnRSZWYpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBGbGFnIHRoYXQgaW5kaWNhdGVzIGlmIHBheXBhbCBzaG91bGQgYmUgaW5pdGlhbGl6ZWQgKHJlcXVpcmVkIGZvciBoYW5kbGluZyBzY3JpcHQgbG9hZCBldmVudHMgYW5kIGF2YWlsYWJpbGl0eSBvZiBET00gZWxlbWVudClcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBpbml0aWFsaXplUGF5UGFsO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZWZlcmVuY2UgdG8gUGF5UGFsIGdsb2JhbCBBUElcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBwYXlQYWw7XHJcbiAgICBjb25zdHJ1Y3RvcihwYXlwYWxTY3JpcHRTZXJ2aWNlOiBQYXlQYWxTY3JpcHRTZXJ2aWNlLCBjZHI6IENoYW5nZURldGVjdG9yUmVmLCBuZ1pvbmU6IE5nWm9uZSk7XHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcclxuICAgIGN1c3RvbUluaXQocGF5UGFsOiBhbnkpOiB2b2lkO1xyXG4gICAgcmVpbml0aWFsaXplKGNvbmZpZzogSVBheVBhbENvbmZpZyB8IHVuZGVmaW5lZCk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIGRvUGF5UGFsQ2hlY2s7XHJcbiAgICBwcml2YXRlIGluaXRQYXlQYWxTY3JpcHQ7XHJcbiAgICBwcml2YXRlIGdlbmVyYXRlRWxlbWVudElkO1xyXG4gICAgcHJpdmF0ZSBpbml0UGF5UGFsO1xyXG59XHJcbiJdfQ==